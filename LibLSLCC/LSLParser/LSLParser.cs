//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Eric/IdeaProjects/untitled/src\LSL.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LibLSLCC {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class LSLParser : Parser {
	public const int
		TYPE=1, DO=2, IF=3, ELSE=4, WHILE=5, FOR=6, DEFAULT=7, STATE=8, RETURN=9, 
		JUMP=10, ID=11, HEX_LITERAL=12, INT=13, FLOAT=14, QUOTED_STRING=15, SEMI_COLON=16, 
		EQUAL=17, LOGICAL_EQUAL=18, LOGICAL_NOT_EQUAL=19, LESS_THAN=20, GREATER_THAN=21, 
		LESS_THAN_EQUAL=22, GREATER_THAN_EQUAL=23, RIGHT_SHIFT=24, LEFT_SHIFT=25, 
		RIGHT_SHIFT_EQUAL=26, LEFT_SHIFT_EQUAL=27, MINUS=28, PLUS=29, MINUS_EQUAL=30, 
		PLUS_EQUAL=31, INCREMENT=32, DECREMENT=33, MUL=34, DIV=35, MOD=36, MUL_EQUAL=37, 
		DIV_EQUAL=38, MOD_EQUAL=39, COMMA=40, O_PAREN=41, C_PAREN=42, O_BRACE=43, 
		C_BRACE=44, O_BRACKET=45, C_BRACKET=46, LABEL_PREFIX=47, BITWISE_OR=48, 
		BITWISE_AND=49, BITWISE_NOT=50, BITWISE_XOR=51, LOGICAL_NOT=52, LOGICAL_AND=53, 
		LOGICAL_OR=54, DOT=55, Whitespace=56, Newline=57, BlockComment=58, LineComment=59;
	public const int
		RULE_vectorLiteral = 0, RULE_rotationLiteral = 1, RULE_functionDeclaration = 2, 
		RULE_codeScopeOrSingleBlockStatement = 3, RULE_elseIfStatement = 4, RULE_elseStatement = 5, 
		RULE_ifStatement = 6, RULE_controlStructure = 7, RULE_codeScope = 8, RULE_doLoop = 9, 
		RULE_whileLoop = 10, RULE_forLoop = 11, RULE_loopStructure = 12, RULE_codeStatement = 13, 
		RULE_expressionStatement = 14, RULE_returnStatement = 15, RULE_labelStatement = 16, 
		RULE_jumpStatement = 17, RULE_stateChangeStatement = 18, RULE_localVariableDeclaration = 19, 
		RULE_globalVariableDeclaration = 20, RULE_expressionList = 21, RULE_expression = 22, 
		RULE_optionalExpressionList = 23, RULE_optionalParameterList = 24, RULE_listLiteral = 25, 
		RULE_compilationUnit = 26, RULE_parameterDefinition = 27, RULE_parameterList = 28, 
		RULE_eventHandler = 29, RULE_definedState = 30, RULE_defaultState = 31;
	public static readonly string[] ruleNames = {
		"vectorLiteral", "rotationLiteral", "functionDeclaration", "codeScopeOrSingleBlockStatement", 
		"elseIfStatement", "elseStatement", "ifStatement", "controlStructure", 
		"codeScope", "doLoop", "whileLoop", "forLoop", "loopStructure", "codeStatement", 
		"expressionStatement", "returnStatement", "labelStatement", "jumpStatement", 
		"stateChangeStatement", "localVariableDeclaration", "globalVariableDeclaration", 
		"expressionList", "expression", "optionalExpressionList", "optionalParameterList", 
		"listLiteral", "compilationUnit", "parameterDefinition", "parameterList", 
		"eventHandler", "definedState", "defaultState"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'do'", "'if'", "'else'", "'while'", "'for'", "'default'", 
		"'state'", "'return'", "'jump'", null, null, null, null, null, "';'", 
		"'='", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'>>'", "'<<'", "'>>='", 
		"'<<='", "'-'", "'+'", "'-='", "'+='", "'++'", "'--'", "'*'", "'/'", "'%'", 
		"'*='", "'/='", "'%='", "','", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"'@'", "'|'", "'&'", "'~'", "'^'", "'!'", "'&&'", "'||'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TYPE", "DO", "IF", "ELSE", "WHILE", "FOR", "DEFAULT", "STATE", 
		"RETURN", "JUMP", "ID", "HEX_LITERAL", "INT", "FLOAT", "QUOTED_STRING", 
		"SEMI_COLON", "EQUAL", "LOGICAL_EQUAL", "LOGICAL_NOT_EQUAL", "LESS_THAN", 
		"GREATER_THAN", "LESS_THAN_EQUAL", "GREATER_THAN_EQUAL", "RIGHT_SHIFT", 
		"LEFT_SHIFT", "RIGHT_SHIFT_EQUAL", "LEFT_SHIFT_EQUAL", "MINUS", "PLUS", 
		"MINUS_EQUAL", "PLUS_EQUAL", "INCREMENT", "DECREMENT", "MUL", "DIV", "MOD", 
		"MUL_EQUAL", "DIV_EQUAL", "MOD_EQUAL", "COMMA", "O_PAREN", "C_PAREN", 
		"O_BRACE", "C_BRACE", "O_BRACKET", "C_BRACKET", "LABEL_PREFIX", "BITWISE_OR", 
		"BITWISE_AND", "BITWISE_NOT", "BITWISE_XOR", "LOGICAL_NOT", "LOGICAL_AND", 
		"LOGICAL_OR", "DOT", "Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LSLParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class VectorLiteralContext : ParserRuleContext {
		public ExpressionContext vector_x;
		public ExpressionContext vector_y;
		public ExpressionContext vector_z;
		public ITerminalNode LESS_THAN() { return GetToken(LSLParser.LESS_THAN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(LSLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LSLParser.COMMA, i);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(LSLParser.GREATER_THAN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VectorLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterVectorLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitVectorLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorLiteralContext vectorLiteral() {
		VectorLiteralContext _localctx = new VectorLiteralContext(Context, State);
		EnterRule(_localctx, 0, RULE_vectorLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(LESS_THAN);
			State = 65; _localctx.vector_x = expression(0);
			State = 66; Match(COMMA);
			State = 67; _localctx.vector_y = expression(0);
			State = 68; Match(COMMA);
			State = 69; _localctx.vector_z = expression(0);
			State = 70; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RotationLiteralContext : ParserRuleContext {
		public ExpressionContext rotation_x;
		public ExpressionContext rotation_y;
		public ExpressionContext rotation_z;
		public ExpressionContext rotation_s;
		public ITerminalNode LESS_THAN() { return GetToken(LSLParser.LESS_THAN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(LSLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LSLParser.COMMA, i);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(LSLParser.GREATER_THAN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RotationLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rotationLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterRotationLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitRotationLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRotationLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RotationLiteralContext rotationLiteral() {
		RotationLiteralContext _localctx = new RotationLiteralContext(Context, State);
		EnterRule(_localctx, 2, RULE_rotationLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(LESS_THAN);
			State = 73; _localctx.rotation_x = expression(0);
			State = 74; Match(COMMA);
			State = 75; _localctx.rotation_y = expression(0);
			State = 76; Match(COMMA);
			State = 77; _localctx.rotation_z = expression(0);
			State = 78; Match(COMMA);
			State = 79; _localctx.rotation_s = expression(0);
			State = 80; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public IToken return_type;
		public IToken function_name;
		public OptionalParameterListContext parameters;
		public CodeScopeContext code;
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public OptionalParameterListContext optionalParameterList() {
			return GetRuleContext<OptionalParameterListContext>(0);
		}
		public CodeScopeContext codeScope() {
			return GetRuleContext<CodeScopeContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(LSLParser.TYPE, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_la = TokenStream.La(1);
			if (_la==TYPE) {
				{
				State = 82; _localctx.return_type = Match(TYPE);
				}
			}

			State = 85; _localctx.function_name = Match(ID);
			State = 86; Match(O_PAREN);
			State = 87; _localctx.parameters = optionalParameterList();
			State = 88; Match(C_PAREN);
			State = 89; _localctx.code = codeScope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeScopeOrSingleBlockStatementContext : ParserRuleContext {
		public CodeScopeContext code;
		public CodeStatementContext statement;
		public CodeScopeContext codeScope() {
			return GetRuleContext<CodeScopeContext>(0);
		}
		public CodeStatementContext codeStatement() {
			return GetRuleContext<CodeStatementContext>(0);
		}
		public CodeScopeOrSingleBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeScopeOrSingleBlockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterCodeScopeOrSingleBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitCodeScopeOrSingleBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeScopeOrSingleBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeScopeOrSingleBlockStatementContext codeScopeOrSingleBlockStatement() {
		CodeScopeOrSingleBlockStatementContext _localctx = new CodeScopeOrSingleBlockStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_codeScopeOrSingleBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 91; _localctx.code = codeScope();
				}
				break;
			case 2:
				{
				State = 92; _localctx.statement = codeStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ExpressionContext condition;
		public CodeScopeOrSingleBlockStatementContext code;
		public ITerminalNode ELSE() { return GetToken(LSLParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(LSLParser.IF, 0); }
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public CodeScopeOrSingleBlockStatementContext codeScopeOrSingleBlockStatement() {
			return GetRuleContext<CodeScopeOrSingleBlockStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_elseIfStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(ELSE);
			State = 96; Match(IF);
			State = 97; Match(O_PAREN);
			State = 99;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACKET) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				State = 98; _localctx.condition = expression(0);
				}
			}

			State = 101; Match(C_PAREN);
			State = 102; _localctx.code = codeScopeOrSingleBlockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public CodeScopeOrSingleBlockStatementContext code;
		public ITerminalNode ELSE() { return GetToken(LSLParser.ELSE, 0); }
		public CodeScopeOrSingleBlockStatementContext codeScopeOrSingleBlockStatement() {
			return GetRuleContext<CodeScopeOrSingleBlockStatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(ELSE);
			State = 105; _localctx.code = codeScopeOrSingleBlockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext condition;
		public CodeScopeOrSingleBlockStatementContext code;
		public ITerminalNode IF() { return GetToken(LSLParser.IF, 0); }
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public CodeScopeOrSingleBlockStatementContext codeScopeOrSingleBlockStatement() {
			return GetRuleContext<CodeScopeOrSingleBlockStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(IF);
			State = 108; Match(O_PAREN);
			State = 110;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACKET) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				State = 109; _localctx.condition = expression(0);
				}
			}

			State = 112; Match(C_PAREN);
			State = 113; _localctx.code = codeScopeOrSingleBlockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlStructureContext : ParserRuleContext {
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		public ControlStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlStructure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterControlStructure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitControlStructure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlStructureContext controlStructure() {
		ControlStructureContext _localctx = new ControlStructureContext(Context, State);
		EnterRule(_localctx, 14, RULE_controlStructure);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; ifStatement();
			State = 125;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				{
				State = 117;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 116; elseIfStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 119;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 122;
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 121; elseStatement();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				State = 124; elseStatement();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeScopeContext : ParserRuleContext {
		public ITerminalNode O_BRACE() { return GetToken(LSLParser.O_BRACE, 0); }
		public ITerminalNode C_BRACE() { return GetToken(LSLParser.C_BRACE, 0); }
		public CodeStatementContext[] codeStatement() {
			return GetRuleContexts<CodeStatementContext>();
		}
		public CodeStatementContext codeStatement(int i) {
			return GetRuleContext<CodeStatementContext>(i);
		}
		public CodeScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeScope; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterCodeScope(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitCodeScope(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeScopeContext codeScope() {
		CodeScopeContext _localctx = new CodeScopeContext(Context, State);
		EnterRule(_localctx, 16, RULE_codeScope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(O_BRACE);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << DO) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << STATE) | (1L << RETURN) | (1L << JUMP) | (1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << SEMI_COLON) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACE) | (1L << O_BRACKET) | (1L << LABEL_PREFIX) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				{
				State = 128; codeStatement();
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 134; Match(C_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopContext : ParserRuleContext {
		public IToken loop_keyword;
		public CodeScopeOrSingleBlockStatementContext code;
		public ExpressionContext loop_condition;
		public ITerminalNode WHILE() { return GetToken(LSLParser.WHILE, 0); }
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public ITerminalNode DO() { return GetToken(LSLParser.DO, 0); }
		public CodeScopeOrSingleBlockStatementContext codeScopeOrSingleBlockStatement() {
			return GetRuleContext<CodeScopeOrSingleBlockStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterDoLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitDoLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopContext doLoop() {
		DoLoopContext _localctx = new DoLoopContext(Context, State);
		EnterRule(_localctx, 18, RULE_doLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; _localctx.loop_keyword = Match(DO);
			State = 137; _localctx.code = codeScopeOrSingleBlockStatement();
			State = 138; Match(WHILE);
			State = 139; Match(O_PAREN);
			State = 141;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACKET) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				State = 140; _localctx.loop_condition = expression(0);
				}
			}

			State = 143; Match(C_PAREN);
			State = 144; Match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public IToken loop_keyword;
		public ExpressionContext loop_condition;
		public CodeScopeOrSingleBlockStatementContext code;
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public ITerminalNode WHILE() { return GetToken(LSLParser.WHILE, 0); }
		public CodeScopeOrSingleBlockStatementContext codeScopeOrSingleBlockStatement() {
			return GetRuleContext<CodeScopeOrSingleBlockStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 20, RULE_whileLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; _localctx.loop_keyword = Match(WHILE);
			State = 147; Match(O_PAREN);
			State = 149;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACKET) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				State = 148; _localctx.loop_condition = expression(0);
				}
			}

			State = 151; Match(C_PAREN);
			State = 152; _localctx.code = codeScopeOrSingleBlockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		public IToken loop_keyword;
		public ExpressionContext loop_init;
		public ExpressionContext loop_condition;
		public OptionalExpressionListContext expression_list;
		public CodeScopeOrSingleBlockStatementContext code;
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode[] SEMI_COLON() { return GetTokens(LSLParser.SEMI_COLON); }
		public ITerminalNode SEMI_COLON(int i) {
			return GetToken(LSLParser.SEMI_COLON, i);
		}
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public ITerminalNode FOR() { return GetToken(LSLParser.FOR, 0); }
		public OptionalExpressionListContext optionalExpressionList() {
			return GetRuleContext<OptionalExpressionListContext>(0);
		}
		public CodeScopeOrSingleBlockStatementContext codeScopeOrSingleBlockStatement() {
			return GetRuleContext<CodeScopeOrSingleBlockStatementContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterForLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitForLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 22, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; _localctx.loop_keyword = Match(FOR);
			State = 155; Match(O_PAREN);
			State = 157;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACKET) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				State = 156; _localctx.loop_init = expression(0);
				}
			}

			State = 159; Match(SEMI_COLON);
			State = 161;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACKET) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				State = 160; _localctx.loop_condition = expression(0);
				}
			}

			State = 163; Match(SEMI_COLON);
			State = 164; _localctx.expression_list = optionalExpressionList();
			State = 165; Match(C_PAREN);
			State = 166; _localctx.code = codeScopeOrSingleBlockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStructureContext : ParserRuleContext {
		public DoLoopContext do_loop;
		public ForLoopContext for_loop;
		public WhileLoopContext while_loop;
		public DoLoopContext doLoop() {
			return GetRuleContext<DoLoopContext>(0);
		}
		public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		public LoopStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStructure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterLoopStructure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitLoopStructure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStructureContext loopStructure() {
		LoopStructureContext _localctx = new LoopStructureContext(Context, State);
		EnterRule(_localctx, 24, RULE_loopStructure);
		try {
			State = 171;
			switch (TokenStream.La(1)) {
			case DO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 168; _localctx.do_loop = doLoop();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169; _localctx.for_loop = forLoop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 170; _localctx.while_loop = whileLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext variable_declaration;
		public ExpressionStatementContext expression_statement;
		public ReturnStatementContext return_statement;
		public JumpStatementContext jump_statement;
		public LabelStatementContext label_statement;
		public StateChangeStatementContext state_change_statement;
		public ControlStructureContext control_structure;
		public LoopStructureContext loop_structure;
		public CodeScopeContext code_scope;
		public IToken semi_colon;
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		public LabelStatementContext labelStatement() {
			return GetRuleContext<LabelStatementContext>(0);
		}
		public StateChangeStatementContext stateChangeStatement() {
			return GetRuleContext<StateChangeStatementContext>(0);
		}
		public ControlStructureContext controlStructure() {
			return GetRuleContext<ControlStructureContext>(0);
		}
		public LoopStructureContext loopStructure() {
			return GetRuleContext<LoopStructureContext>(0);
		}
		public CodeScopeContext codeScope() {
			return GetRuleContext<CodeScopeContext>(0);
		}
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public CodeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterCodeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitCodeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeStatementContext codeStatement() {
		CodeStatementContext _localctx = new CodeStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_codeStatement);
		try {
			State = 183;
			switch (TokenStream.La(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; _localctx.variable_declaration = localVariableDeclaration();
				}
				break;
			case ID:
			case HEX_LITERAL:
			case INT:
			case FLOAT:
			case QUOTED_STRING:
			case LESS_THAN:
			case MINUS:
			case PLUS:
			case INCREMENT:
			case DECREMENT:
			case O_PAREN:
			case O_BRACKET:
			case BITWISE_NOT:
			case LOGICAL_NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174; _localctx.expression_statement = expressionStatement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 175; _localctx.return_statement = returnStatement();
				}
				break;
			case JUMP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 176; _localctx.jump_statement = jumpStatement();
				}
				break;
			case LABEL_PREFIX:
				EnterOuterAlt(_localctx, 5);
				{
				State = 177; _localctx.label_statement = labelStatement();
				}
				break;
			case STATE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 178; _localctx.state_change_statement = stateChangeStatement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 179; _localctx.control_structure = controlStructure();
				}
				break;
			case DO:
			case WHILE:
			case FOR:
				EnterOuterAlt(_localctx, 8);
				{
				State = 180; _localctx.loop_structure = loopStructure();
				}
				break;
			case O_BRACE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 181; _localctx.code_scope = codeScope();
				}
				break;
			case SEMI_COLON:
				EnterOuterAlt(_localctx, 10);
				{
				State = 182; _localctx.semi_colon = Match(SEMI_COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression_rule;
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; _localctx.expression_rule = expression(0);
			State = 186; Match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext return_expression;
		public ITerminalNode RETURN() { return GetToken(LSLParser.RETURN, 0); }
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_returnStatement);
		try {
			State = 194;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188; Match(RETURN);
				State = 189; _localctx.return_expression = expression(0);
				State = 190; Match(SEMI_COLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192; Match(RETURN);
				State = 193; Match(SEMI_COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelStatementContext : ParserRuleContext {
		public IToken label_name;
		public ITerminalNode LABEL_PREFIX() { return GetToken(LSLParser.LABEL_PREFIX, 0); }
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public LabelStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterLabelStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitLabelStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelStatementContext labelStatement() {
		LabelStatementContext _localctx = new LabelStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_labelStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(LABEL_PREFIX);
			State = 197; _localctx.label_name = Match(ID);
			State = 198; Match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		public IToken jump_target;
		public ITerminalNode JUMP() { return GetToken(LSLParser.JUMP, 0); }
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterJumpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitJumpStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_jumpStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(JUMP);
			State = 201; _localctx.jump_target = Match(ID);
			State = 202; Match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateChangeStatementContext : ParserRuleContext {
		public IToken state_target;
		public ITerminalNode STATE() { return GetToken(LSLParser.STATE, 0); }
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ITerminalNode DEFAULT() { return GetToken(LSLParser.DEFAULT, 0); }
		public StateChangeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateChangeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterStateChangeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitStateChangeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateChangeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateChangeStatementContext stateChangeStatement() {
		StateChangeStatementContext _localctx = new StateChangeStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_stateChangeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(STATE);
			State = 205;
			_localctx.state_target = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==DEFAULT || _la==ID) ) {
				_localctx.state_target = ErrorHandler.RecoverInline(this);
			}
			Consume();
			State = 206; Match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public IToken variable_type;
		public IToken variable_name;
		public ExpressionContext variable_value;
		public ITerminalNode EQUAL() { return GetToken(LSLParser.EQUAL, 0); }
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(LSLParser.TYPE, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_localVariableDeclaration);
		try {
			State = 217;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208; _localctx.variable_type = Match(TYPE);
				State = 209; _localctx.variable_name = Match(ID);
				State = 210; Match(EQUAL);
				State = 211; _localctx.variable_value = expression(0);
				State = 212; Match(SEMI_COLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; _localctx.variable_type = Match(TYPE);
				State = 215; _localctx.variable_name = Match(ID);
				State = 216; Match(SEMI_COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableDeclarationContext : ParserRuleContext {
		public IToken variable_type;
		public IToken variable_name;
		public ExpressionContext variable_value;
		public ITerminalNode EQUAL() { return GetToken(LSLParser.EQUAL, 0); }
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(LSLParser.TYPE, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GlobalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterGlobalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitGlobalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableDeclarationContext globalVariableDeclaration() {
		GlobalVariableDeclarationContext _localctx = new GlobalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_globalVariableDeclaration);
		try {
			State = 228;
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219; _localctx.variable_type = Match(TYPE);
				State = 220; _localctx.variable_name = Match(ID);
				State = 221; Match(EQUAL);
				State = 222; _localctx.variable_value = expression(0);
				State = 223; Match(SEMI_COLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225; _localctx.variable_type = Match(TYPE);
				State = 226; _localctx.variable_name = Match(ID);
				State = 227; Match(SEMI_COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LSLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LSLParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 42, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; expression(0);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 231; Match(COMMA);
				State = 232; expression(0);
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr_PrefixOperationContext : ExpressionContext {
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INCREMENT() { return GetToken(LSLParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(LSLParser.DECREMENT, 0); }
		public ITerminalNode MINUS() { return GetToken(LSLParser.MINUS, 0); }
		public ITerminalNode PLUS() { return GetToken(LSLParser.PLUS, 0); }
		public ITerminalNode LOGICAL_NOT() { return GetToken(LSLParser.LOGICAL_NOT, 0); }
		public ITerminalNode BITWISE_NOT() { return GetToken(LSLParser.BITWISE_NOT, 0); }
		public Expr_PrefixOperationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_PrefixOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_PrefixOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_PrefixOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expr_value;
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_AtomContext : ExpressionContext {
		public IToken variable;
		public IToken string_literal;
		public IToken integer_literal;
		public IToken float_literal;
		public IToken hex_literal;
		public VectorLiteralContext vector_literal;
		public RotationLiteralContext rotation_literal;
		public ListLiteralContext list_literal;
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(LSLParser.QUOTED_STRING, 0); }
		public ITerminalNode INT() { return GetToken(LSLParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(LSLParser.FLOAT, 0); }
		public ITerminalNode HEX_LITERAL() { return GetToken(LSLParser.HEX_LITERAL, 0); }
		public VectorLiteralContext vectorLiteral() {
			return GetRuleContext<VectorLiteralContext>(0);
		}
		public RotationLiteralContext rotationLiteral() {
			return GetRuleContext<RotationLiteralContext>(0);
		}
		public ListLiteralContext listLiteral() {
			return GetRuleContext<ListLiteralContext>(0);
		}
		public Expr_AtomContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_Atom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_Atom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_Atom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_TypeCastContext : ExpressionContext {
		public IToken cast_type;
		public ExpressionContext expr_rvalue;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public ITerminalNode TYPE() { return GetToken(LSLParser.TYPE, 0); }
		public Expr_TypeCastContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_TypeCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_TypeCast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_TypeCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_BitwiseShiftContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LEFT_SHIFT() { return GetToken(LSLParser.LEFT_SHIFT, 0); }
		public ITerminalNode RIGHT_SHIFT() { return GetToken(LSLParser.RIGHT_SHIFT, 0); }
		public Expr_BitwiseShiftContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_BitwiseShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_BitwiseShift(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_BitwiseShift(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_LogicalCompareContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LESS_THAN() { return GetToken(LSLParser.LESS_THAN, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(LSLParser.GREATER_THAN, 0); }
		public ITerminalNode GREATER_THAN_EQUAL() { return GetToken(LSLParser.GREATER_THAN_EQUAL, 0); }
		public ITerminalNode LESS_THAN_EQUAL() { return GetToken(LSLParser.LESS_THAN_EQUAL, 0); }
		public Expr_LogicalCompareContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_LogicalCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_LogicalCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_LogicalCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_LogicalEqualityContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LOGICAL_EQUAL() { return GetToken(LSLParser.LOGICAL_EQUAL, 0); }
		public ITerminalNode LOGICAL_NOT_EQUAL() { return GetToken(LSLParser.LOGICAL_NOT_EQUAL, 0); }
		public Expr_LogicalEqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_LogicalEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_LogicalEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_LogicalEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_LogicalOrContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LOGICAL_OR() { return GetToken(LSLParser.LOGICAL_OR, 0); }
		public Expr_LogicalOrContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_LogicalOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_LogicalOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_LogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_BitwiseOrContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BITWISE_OR() { return GetToken(LSLParser.BITWISE_OR, 0); }
		public Expr_BitwiseOrContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_BitwiseOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_BitwiseOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_BitwiseOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_BitwiseXorContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BITWISE_XOR() { return GetToken(LSLParser.BITWISE_XOR, 0); }
		public Expr_BitwiseXorContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_BitwiseXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_BitwiseXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_BitwiseXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_AssignmentContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQUAL() { return GetToken(LSLParser.EQUAL, 0); }
		public Expr_AssignmentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_Assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_Assignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_Assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_MultDivModContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(LSLParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(LSLParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(LSLParser.MOD, 0); }
		public Expr_MultDivModContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_MultDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_MultDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_MultDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_BitwiseAndContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BITWISE_AND() { return GetToken(LSLParser.BITWISE_AND, 0); }
		public Expr_BitwiseAndContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_BitwiseAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_BitwiseAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_BitwiseAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_PostfixOperationContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INCREMENT() { return GetToken(LSLParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(LSLParser.DECREMENT, 0); }
		public Expr_PostfixOperationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_PostfixOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_PostfixOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_PostfixOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_FunctionCallContext : ExpressionContext {
		public IToken function_name;
		public OptionalExpressionListContext expression_list;
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public OptionalExpressionListContext optionalExpressionList() {
			return GetRuleContext<OptionalExpressionListContext>(0);
		}
		public Expr_FunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_FunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_FunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_FunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_ModifyingAssignmentContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS_EQUAL() { return GetToken(LSLParser.PLUS_EQUAL, 0); }
		public ITerminalNode MINUS_EQUAL() { return GetToken(LSLParser.MINUS_EQUAL, 0); }
		public ITerminalNode MUL_EQUAL() { return GetToken(LSLParser.MUL_EQUAL, 0); }
		public ITerminalNode DIV_EQUAL() { return GetToken(LSLParser.DIV_EQUAL, 0); }
		public ITerminalNode MOD_EQUAL() { return GetToken(LSLParser.MOD_EQUAL, 0); }
		public Expr_ModifyingAssignmentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_ModifyingAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_ModifyingAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_ModifyingAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_LogicalAndContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LOGICAL_AND() { return GetToken(LSLParser.LOGICAL_AND, 0); }
		public Expr_LogicalAndContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_LogicalAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_LogicalAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_LogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_DotAccessorContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public IToken member;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(LSLParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public Expr_DotAccessorContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_DotAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_DotAccessor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_DotAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_AddSubContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(LSLParser.MINUS, 0); }
		public ITerminalNode PLUS() { return GetToken(LSLParser.PLUS, 0); }
		public Expr_AddSubContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_AddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_AddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_AddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				_localctx = new Expr_PrefixOperationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 239;
				((Expr_PrefixOperationContext)_localctx).operation = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) ) {
					((Expr_PrefixOperationContext)_localctx).operation = ErrorHandler.RecoverInline(this);
				}
				Consume();
				State = 240; ((Expr_PrefixOperationContext)_localctx).expr_rvalue = expression(15);
				}
				break;
			case 2:
				{
				_localctx = new Expr_TypeCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				{
				State = 241; Match(O_PAREN);
				State = 242; ((Expr_TypeCastContext)_localctx).cast_type = Match(TYPE);
				State = 243; Match(C_PAREN);
				}
				State = 245; ((Expr_TypeCastContext)_localctx).expr_rvalue = expression(14);
				}
				break;
			case 3:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 246; Match(O_PAREN);
				State = 247; ((ParenthesizedExpressionContext)_localctx).expr_value = expression(0);
				State = 248; Match(C_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new Expr_FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 250; ((Expr_FunctionCallContext)_localctx).function_name = Match(ID);
				{
				State = 251; Match(O_PAREN);
				State = 252; ((Expr_FunctionCallContext)_localctx).expression_list = optionalExpressionList();
				State = 253; Match(C_PAREN);
				}
				}
				break;
			case 5:
				{
				_localctx = new Expr_AtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 263;
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 255; ((Expr_AtomContext)_localctx).variable = Match(ID);
					}
					break;
				case 2:
					{
					State = 256; ((Expr_AtomContext)_localctx).string_literal = Match(QUOTED_STRING);
					}
					break;
				case 3:
					{
					State = 257; ((Expr_AtomContext)_localctx).integer_literal = Match(INT);
					}
					break;
				case 4:
					{
					State = 258; ((Expr_AtomContext)_localctx).float_literal = Match(FLOAT);
					}
					break;
				case 5:
					{
					State = 259; ((Expr_AtomContext)_localctx).hex_literal = Match(HEX_LITERAL);
					}
					break;
				case 6:
					{
					State = 260; ((Expr_AtomContext)_localctx).vector_literal = vectorLiteral();
					}
					break;
				case 7:
					{
					State = 261; ((Expr_AtomContext)_localctx).rotation_literal = rotationLiteral();
					}
					break;
				case 8:
					{
					State = 262; ((Expr_AtomContext)_localctx).list_literal = listLiteral();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 310;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 308;
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new Expr_MultDivModContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_MultDivModContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 267;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 268;
						((Expr_MultDivModContext)_localctx).operation = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((Expr_MultDivModContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 269; ((Expr_MultDivModContext)_localctx).expr_rvalue = expression(14);
						}
						break;
					case 2:
						{
						_localctx = new Expr_AddSubContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_AddSubContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 270;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 271;
						((Expr_AddSubContext)_localctx).operation = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
							((Expr_AddSubContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 272; ((Expr_AddSubContext)_localctx).expr_rvalue = expression(13);
						}
						break;
					case 3:
						{
						_localctx = new Expr_BitwiseShiftContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_BitwiseShiftContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 273;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 274;
						((Expr_BitwiseShiftContext)_localctx).operation = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==RIGHT_SHIFT || _la==LEFT_SHIFT) ) {
							((Expr_BitwiseShiftContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 275; ((Expr_BitwiseShiftContext)_localctx).expr_rvalue = expression(12);
						}
						break;
					case 4:
						{
						_localctx = new Expr_LogicalCompareContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_LogicalCompareContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 276;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 277;
						((Expr_LogicalCompareContext)_localctx).operation = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS_THAN) | (1L << GREATER_THAN) | (1L << LESS_THAN_EQUAL) | (1L << GREATER_THAN_EQUAL))) != 0)) ) {
							((Expr_LogicalCompareContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 278; ((Expr_LogicalCompareContext)_localctx).expr_rvalue = expression(11);
						}
						break;
					case 5:
						{
						_localctx = new Expr_LogicalEqualityContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_LogicalEqualityContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 279;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 280;
						((Expr_LogicalEqualityContext)_localctx).operation = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==LOGICAL_EQUAL || _la==LOGICAL_NOT_EQUAL) ) {
							((Expr_LogicalEqualityContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 281; ((Expr_LogicalEqualityContext)_localctx).expr_rvalue = expression(10);
						}
						break;
					case 6:
						{
						_localctx = new Expr_BitwiseAndContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_BitwiseAndContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 282;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						{
						State = 283; ((Expr_BitwiseAndContext)_localctx).operation = Match(BITWISE_AND);
						}
						State = 284; ((Expr_BitwiseAndContext)_localctx).expr_rvalue = expression(9);
						}
						break;
					case 7:
						{
						_localctx = new Expr_BitwiseXorContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_BitwiseXorContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 285;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						{
						State = 286; ((Expr_BitwiseXorContext)_localctx).operation = Match(BITWISE_XOR);
						}
						State = 287; ((Expr_BitwiseXorContext)_localctx).expr_rvalue = expression(8);
						}
						break;
					case 8:
						{
						_localctx = new Expr_BitwiseOrContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_BitwiseOrContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 288;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						{
						State = 289; ((Expr_BitwiseOrContext)_localctx).operation = Match(BITWISE_OR);
						}
						State = 290; ((Expr_BitwiseOrContext)_localctx).expr_rvalue = expression(7);
						}
						break;
					case 9:
						{
						_localctx = new Expr_LogicalAndContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_LogicalAndContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 291;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						{
						State = 292; ((Expr_LogicalAndContext)_localctx).operation = Match(LOGICAL_AND);
						}
						State = 293; ((Expr_LogicalAndContext)_localctx).expr_rvalue = expression(6);
						}
						break;
					case 10:
						{
						_localctx = new Expr_LogicalOrContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_LogicalOrContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 294;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						{
						State = 295; ((Expr_LogicalOrContext)_localctx).operation = Match(LOGICAL_OR);
						}
						State = 296; ((Expr_LogicalOrContext)_localctx).expr_rvalue = expression(5);
						}
						break;
					case 11:
						{
						_localctx = new Expr_AssignmentContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_AssignmentContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 297;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 298; ((Expr_AssignmentContext)_localctx).operation = Match(EQUAL);
						State = 299; ((Expr_AssignmentContext)_localctx).expr_rvalue = expression(4);
						}
						break;
					case 12:
						{
						_localctx = new Expr_ModifyingAssignmentContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_ModifyingAssignmentContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 300;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 301;
						((Expr_ModifyingAssignmentContext)_localctx).operation = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS_EQUAL) | (1L << PLUS_EQUAL) | (1L << MUL_EQUAL) | (1L << DIV_EQUAL) | (1L << MOD_EQUAL))) != 0)) ) {
							((Expr_ModifyingAssignmentContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 302; ((Expr_ModifyingAssignmentContext)_localctx).expr_rvalue = expression(3);
						}
						break;
					case 13:
						{
						_localctx = new Expr_DotAccessorContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_DotAccessorContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 303;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 304; ((Expr_DotAccessorContext)_localctx).operation = Match(DOT);
						State = 305; ((Expr_DotAccessorContext)_localctx).member = Match(ID);
						}
						break;
					case 14:
						{
						_localctx = new Expr_PostfixOperationContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_PostfixOperationContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 306;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 307;
						((Expr_PostfixOperationContext)_localctx).operation = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==INCREMENT || _la==DECREMENT) ) {
							((Expr_PostfixOperationContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						Consume();
						}
						break;
					}
					} 
				}
				State = 312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OptionalExpressionListContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public OptionalExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterOptionalExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitOptionalExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalExpressionListContext optionalExpressionList() {
		OptionalExpressionListContext _localctx = new OptionalExpressionListContext(Context, State);
		EnterRule(_localctx, 46, RULE_optionalExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACKET) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				State = 313; expressionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalParameterListContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OptionalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterOptionalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitOptionalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalParameterListContext optionalParameterList() {
		OptionalParameterListContext _localctx = new OptionalParameterListContext(Context, State);
		EnterRule(_localctx, 48, RULE_optionalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			_la = TokenStream.La(1);
			if (_la==TYPE) {
				{
				State = 316; parameterList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListLiteralContext : ParserRuleContext {
		public OptionalExpressionListContext expression_list;
		public ITerminalNode O_BRACKET() { return GetToken(LSLParser.O_BRACKET, 0); }
		public ITerminalNode C_BRACKET() { return GetToken(LSLParser.C_BRACKET, 0); }
		public OptionalExpressionListContext optionalExpressionList() {
			return GetRuleContext<OptionalExpressionListContext>(0);
		}
		public ListLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterListLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitListLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListLiteralContext listLiteral() {
		ListLiteralContext _localctx = new ListLiteralContext(Context, State);
		EnterRule(_localctx, 50, RULE_listLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; Match(O_BRACKET);
			State = 320; _localctx.expression_list = optionalExpressionList();
			State = 321; Match(C_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public GlobalVariableDeclarationContext[] globalVariableDeclaration() {
			return GetRuleContexts<GlobalVariableDeclarationContext>();
		}
		public GlobalVariableDeclarationContext globalVariableDeclaration(int i) {
			return GetRuleContext<GlobalVariableDeclarationContext>(i);
		}
		public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		public DefaultStateContext defaultState() {
			return GetRuleContext<DefaultStateContext>(0);
		}
		public DefinedStateContext[] definedState() {
			return GetRuleContexts<DefinedStateContext>();
		}
		public DefinedStateContext definedState(int i) {
			return GetRuleContext<DefinedStateContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 52, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TYPE || _la==ID) {
				{
				State = 325;
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 323; globalVariableDeclaration();
					}
					break;
				case 2:
					{
					State = 324; functionDeclaration();
					}
					break;
				}
				}
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 331;
			_la = TokenStream.La(1);
			if (_la==DEFAULT) {
				{
				State = 330; defaultState();
				}
			}

			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==STATE) {
				{
				{
				State = 333; definedState();
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDefinitionContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(LSLParser.TYPE, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ParameterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterParameterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitParameterDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDefinitionContext parameterDefinition() {
		ParameterDefinitionContext _localctx = new ParameterDefinitionContext(Context, State);
		EnterRule(_localctx, 54, RULE_parameterDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(TYPE);
			State = 340; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterDefinitionContext[] parameterDefinition() {
			return GetRuleContexts<ParameterDefinitionContext>();
		}
		public ParameterDefinitionContext parameterDefinition(int i) {
			return GetRuleContext<ParameterDefinitionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LSLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LSLParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 56, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; parameterDefinition();
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 343; Match(COMMA);
				State = 344; parameterDefinition();
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventHandlerContext : ParserRuleContext {
		public IToken handler_name;
		public OptionalParameterListContext parameters;
		public CodeScopeContext code;
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public OptionalParameterListContext optionalParameterList() {
			return GetRuleContext<OptionalParameterListContext>(0);
		}
		public CodeScopeContext codeScope() {
			return GetRuleContext<CodeScopeContext>(0);
		}
		public EventHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventHandler; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterEventHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitEventHandler(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventHandlerContext eventHandler() {
		EventHandlerContext _localctx = new EventHandlerContext(Context, State);
		EnterRule(_localctx, 58, RULE_eventHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; _localctx.handler_name = Match(ID);
			State = 351; Match(O_PAREN);
			State = 352; _localctx.parameters = optionalParameterList();
			State = 353; Match(C_PAREN);
			State = 354; _localctx.code = codeScope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinedStateContext : ParserRuleContext {
		public IToken state_name;
		public ITerminalNode STATE() { return GetToken(LSLParser.STATE, 0); }
		public ITerminalNode O_BRACE() { return GetToken(LSLParser.O_BRACE, 0); }
		public ITerminalNode C_BRACE() { return GetToken(LSLParser.C_BRACE, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ITerminalNode DEFAULT() { return GetToken(LSLParser.DEFAULT, 0); }
		public EventHandlerContext[] eventHandler() {
			return GetRuleContexts<EventHandlerContext>();
		}
		public EventHandlerContext eventHandler(int i) {
			return GetRuleContext<EventHandlerContext>(i);
		}
		public DefinedStateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definedState; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterDefinedState(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitDefinedState(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinedState(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinedStateContext definedState() {
		DefinedStateContext _localctx = new DefinedStateContext(Context, State);
		EnterRule(_localctx, 60, RULE_definedState);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(STATE);
			State = 357;
			_localctx.state_name = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==DEFAULT || _la==ID) ) {
				_localctx.state_name = ErrorHandler.RecoverInline(this);
			}
			Consume();
			State = 358; Match(O_BRACE);
			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ID) {
				{
				{
				State = 359; eventHandler();
				}
				}
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 365; Match(C_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultStateContext : ParserRuleContext {
		public IToken state_name;
		public ITerminalNode O_BRACE() { return GetToken(LSLParser.O_BRACE, 0); }
		public ITerminalNode C_BRACE() { return GetToken(LSLParser.C_BRACE, 0); }
		public ITerminalNode DEFAULT() { return GetToken(LSLParser.DEFAULT, 0); }
		public EventHandlerContext[] eventHandler() {
			return GetRuleContexts<EventHandlerContext>();
		}
		public EventHandlerContext eventHandler(int i) {
			return GetRuleContext<EventHandlerContext>(i);
		}
		public DefaultStateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultState; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterDefaultState(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitDefaultState(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultState(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultStateContext defaultState() {
		DefaultStateContext _localctx = new DefaultStateContext(Context, State);
		EnterRule(_localctx, 62, RULE_defaultState);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; _localctx.state_name = Match(DEFAULT);
			State = 368; Match(O_BRACE);
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ID) {
				{
				{
				State = 369; eventHandler();
				}
				}
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 375; Match(C_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 22: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 17);
		case 13: return Precpred(Context, 16);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3=\x17C\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x5\x4V\n\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x5\x5`\n\x5\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x5\x6\x66\n\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b"+
		"\x5\bq\n\b\x3\b\x3\b\x3\b\x3\t\x3\t\x6\tx\n\t\r\t\xE\ty\x3\t\x5\t}\n\t"+
		"\x3\t\x5\t\x80\n\t\x3\n\x3\n\a\n\x84\n\n\f\n\xE\n\x87\v\n\x3\n\x3\n\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x5\v\x90\n\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x5\f"+
		"\x98\n\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x5\r\xA0\n\r\x3\r\x3\r\x5\r\xA4"+
		"\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x5\xE\xAE\n\xE\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xBA\n\xF\x3"+
		"\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xC5"+
		"\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x5\x15\xDC\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x5\x16\xE7\n\x16\x3\x17\x3\x17\x3\x17\a\x17"+
		"\xEC\n\x17\f\x17\xE\x17\xEF\v\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5"+
		"\x18\x10A\n\x18\x5\x18\x10C\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x137\n\x18\f\x18\xE\x18"+
		"\x13A\v\x18\x3\x19\x5\x19\x13D\n\x19\x3\x1A\x5\x1A\x140\n\x1A\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\a\x1C\x148\n\x1C\f\x1C\xE\x1C\x14B\v"+
		"\x1C\x3\x1C\x5\x1C\x14E\n\x1C\x3\x1C\a\x1C\x151\n\x1C\f\x1C\xE\x1C\x154"+
		"\v\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\a\x1E\x15C\n\x1E\f\x1E"+
		"\xE\x1E\x15F\v\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3"+
		" \x3 \a \x16B\n \f \xE \x16E\v \x3 \x3 \x3!\x3!\x3!\a!\x175\n!\f!\xE!"+
		"\x178\v!\x3!\x3!\x3!\x2\x3.\"\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A"+
		"\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x2\v\x4\x2\t\t\r\r\x6\x2\x1E"+
		"\x1F\"#\x34\x34\x36\x36\x3\x2$&\x3\x2\x1E\x1F\x3\x2\x1A\x1B\x3\x2\x16"+
		"\x19\x3\x2\x14\x15\x4\x2 !\')\x3\x2\"#\x199\x2\x42\x3\x2\x2\x2\x4J\x3"+
		"\x2\x2\x2\x6U\x3\x2\x2\x2\b_\x3\x2\x2\x2\n\x61\x3\x2\x2\x2\fj\x3\x2\x2"+
		"\x2\xEm\x3\x2\x2\x2\x10u\x3\x2\x2\x2\x12\x81\x3\x2\x2\x2\x14\x8A\x3\x2"+
		"\x2\x2\x16\x94\x3\x2\x2\x2\x18\x9C\x3\x2\x2\x2\x1A\xAD\x3\x2\x2\x2\x1C"+
		"\xB9\x3\x2\x2\x2\x1E\xBB\x3\x2\x2\x2 \xC4\x3\x2\x2\x2\"\xC6\x3\x2\x2\x2"+
		"$\xCA\x3\x2\x2\x2&\xCE\x3\x2\x2\x2(\xDB\x3\x2\x2\x2*\xE6\x3\x2\x2\x2,"+
		"\xE8\x3\x2\x2\x2.\x10B\x3\x2\x2\x2\x30\x13C\x3\x2\x2\x2\x32\x13F\x3\x2"+
		"\x2\x2\x34\x141\x3\x2\x2\x2\x36\x149\x3\x2\x2\x2\x38\x155\x3\x2\x2\x2"+
		":\x158\x3\x2\x2\x2<\x160\x3\x2\x2\x2>\x166\x3\x2\x2\x2@\x171\x3\x2\x2"+
		"\x2\x42\x43\a\x16\x2\x2\x43\x44\x5.\x18\x2\x44\x45\a*\x2\x2\x45\x46\x5"+
		".\x18\x2\x46G\a*\x2\x2GH\x5.\x18\x2HI\a\x17\x2\x2I\x3\x3\x2\x2\x2JK\a"+
		"\x16\x2\x2KL\x5.\x18\x2LM\a*\x2\x2MN\x5.\x18\x2NO\a*\x2\x2OP\x5.\x18\x2"+
		"PQ\a*\x2\x2QR\x5.\x18\x2RS\a\x17\x2\x2S\x5\x3\x2\x2\x2TV\a\x3\x2\x2UT"+
		"\x3\x2\x2\x2UV\x3\x2\x2\x2VW\x3\x2\x2\x2WX\a\r\x2\x2XY\a+\x2\x2YZ\x5\x32"+
		"\x1A\x2Z[\a,\x2\x2[\\\x5\x12\n\x2\\\a\x3\x2\x2\x2]`\x5\x12\n\x2^`\x5\x1C"+
		"\xF\x2_]\x3\x2\x2\x2_^\x3\x2\x2\x2`\t\x3\x2\x2\x2\x61\x62\a\x6\x2\x2\x62"+
		"\x63\a\x5\x2\x2\x63\x65\a+\x2\x2\x64\x66\x5.\x18\x2\x65\x64\x3\x2\x2\x2"+
		"\x65\x66\x3\x2\x2\x2\x66g\x3\x2\x2\x2gh\a,\x2\x2hi\x5\b\x5\x2i\v\x3\x2"+
		"\x2\x2jk\a\x6\x2\x2kl\x5\b\x5\x2l\r\x3\x2\x2\x2mn\a\x5\x2\x2np\a+\x2\x2"+
		"oq\x5.\x18\x2po\x3\x2\x2\x2pq\x3\x2\x2\x2qr\x3\x2\x2\x2rs\a,\x2\x2st\x5"+
		"\b\x5\x2t\xF\x3\x2\x2\x2u\x7F\x5\xE\b\x2vx\x5\n\x6\x2wv\x3\x2\x2\x2xy"+
		"\x3\x2\x2\x2yw\x3\x2\x2\x2yz\x3\x2\x2\x2z|\x3\x2\x2\x2{}\x5\f\a\x2|{\x3"+
		"\x2\x2\x2|}\x3\x2\x2\x2}\x80\x3\x2\x2\x2~\x80\x5\f\a\x2\x7Fw\x3\x2\x2"+
		"\x2\x7F~\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80\x11\x3\x2\x2\x2\x81\x85\a"+
		"-\x2\x2\x82\x84\x5\x1C\xF\x2\x83\x82\x3\x2\x2\x2\x84\x87\x3\x2\x2\x2\x85"+
		"\x83\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x88\x3\x2\x2\x2\x87\x85\x3\x2"+
		"\x2\x2\x88\x89\a.\x2\x2\x89\x13\x3\x2\x2\x2\x8A\x8B\a\x4\x2\x2\x8B\x8C"+
		"\x5\b\x5\x2\x8C\x8D\a\a\x2\x2\x8D\x8F\a+\x2\x2\x8E\x90\x5.\x18\x2\x8F"+
		"\x8E\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x92\a,\x2"+
		"\x2\x92\x93\a\x12\x2\x2\x93\x15\x3\x2\x2\x2\x94\x95\a\a\x2\x2\x95\x97"+
		"\a+\x2\x2\x96\x98\x5.\x18\x2\x97\x96\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98"+
		"\x99\x3\x2\x2\x2\x99\x9A\a,\x2\x2\x9A\x9B\x5\b\x5\x2\x9B\x17\x3\x2\x2"+
		"\x2\x9C\x9D\a\b\x2\x2\x9D\x9F\a+\x2\x2\x9E\xA0\x5.\x18\x2\x9F\x9E\x3\x2"+
		"\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA3\a\x12\x2\x2\xA2"+
		"\xA4\x5.\x18\x2\xA3\xA2\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA5\x3\x2"+
		"\x2\x2\xA5\xA6\a\x12\x2\x2\xA6\xA7\x5\x30\x19\x2\xA7\xA8\a,\x2\x2\xA8"+
		"\xA9\x5\b\x5\x2\xA9\x19\x3\x2\x2\x2\xAA\xAE\x5\x14\v\x2\xAB\xAE\x5\x18"+
		"\r\x2\xAC\xAE\x5\x16\f\x2\xAD\xAA\x3\x2\x2\x2\xAD\xAB\x3\x2\x2\x2\xAD"+
		"\xAC\x3\x2\x2\x2\xAE\x1B\x3\x2\x2\x2\xAF\xBA\x5(\x15\x2\xB0\xBA\x5\x1E"+
		"\x10\x2\xB1\xBA\x5 \x11\x2\xB2\xBA\x5$\x13\x2\xB3\xBA\x5\"\x12\x2\xB4"+
		"\xBA\x5&\x14\x2\xB5\xBA\x5\x10\t\x2\xB6\xBA\x5\x1A\xE\x2\xB7\xBA\x5\x12"+
		"\n\x2\xB8\xBA\a\x12\x2\x2\xB9\xAF\x3\x2\x2\x2\xB9\xB0\x3\x2\x2\x2\xB9"+
		"\xB1\x3\x2\x2\x2\xB9\xB2\x3\x2\x2\x2\xB9\xB3\x3\x2\x2\x2\xB9\xB4\x3\x2"+
		"\x2\x2\xB9\xB5\x3\x2\x2\x2\xB9\xB6\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9"+
		"\xB8\x3\x2\x2\x2\xBA\x1D\x3\x2\x2\x2\xBB\xBC\x5.\x18\x2\xBC\xBD\a\x12"+
		"\x2\x2\xBD\x1F\x3\x2\x2\x2\xBE\xBF\a\v\x2\x2\xBF\xC0\x5.\x18\x2\xC0\xC1"+
		"\a\x12\x2\x2\xC1\xC5\x3\x2\x2\x2\xC2\xC3\a\v\x2\x2\xC3\xC5\a\x12\x2\x2"+
		"\xC4\xBE\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC5!\x3\x2\x2\x2\xC6\xC7\a\x31"+
		"\x2\x2\xC7\xC8\a\r\x2\x2\xC8\xC9\a\x12\x2\x2\xC9#\x3\x2\x2\x2\xCA\xCB"+
		"\a\f\x2\x2\xCB\xCC\a\r\x2\x2\xCC\xCD\a\x12\x2\x2\xCD%\x3\x2\x2\x2\xCE"+
		"\xCF\a\n\x2\x2\xCF\xD0\t\x2\x2\x2\xD0\xD1\a\x12\x2\x2\xD1\'\x3\x2\x2\x2"+
		"\xD2\xD3\a\x3\x2\x2\xD3\xD4\a\r\x2\x2\xD4\xD5\a\x13\x2\x2\xD5\xD6\x5."+
		"\x18\x2\xD6\xD7\a\x12\x2\x2\xD7\xDC\x3\x2\x2\x2\xD8\xD9\a\x3\x2\x2\xD9"+
		"\xDA\a\r\x2\x2\xDA\xDC\a\x12\x2\x2\xDB\xD2\x3\x2\x2\x2\xDB\xD8\x3\x2\x2"+
		"\x2\xDC)\x3\x2\x2\x2\xDD\xDE\a\x3\x2\x2\xDE\xDF\a\r\x2\x2\xDF\xE0\a\x13"+
		"\x2\x2\xE0\xE1\x5.\x18\x2\xE1\xE2\a\x12\x2\x2\xE2\xE7\x3\x2\x2\x2\xE3"+
		"\xE4\a\x3\x2\x2\xE4\xE5\a\r\x2\x2\xE5\xE7\a\x12\x2\x2\xE6\xDD\x3\x2\x2"+
		"\x2\xE6\xE3\x3\x2\x2\x2\xE7+\x3\x2\x2\x2\xE8\xED\x5.\x18\x2\xE9\xEA\a"+
		"*\x2\x2\xEA\xEC\x5.\x18\x2\xEB\xE9\x3\x2\x2\x2\xEC\xEF\x3\x2\x2\x2\xED"+
		"\xEB\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE-\x3\x2\x2\x2\xEF\xED\x3\x2\x2"+
		"\x2\xF0\xF1\b\x18\x1\x2\xF1\xF2\t\x3\x2\x2\xF2\x10C\x5.\x18\x11\xF3\xF4"+
		"\a+\x2\x2\xF4\xF5\a\x3\x2\x2\xF5\xF6\a,\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7"+
		"\x10C\x5.\x18\x10\xF8\xF9\a+\x2\x2\xF9\xFA\x5.\x18\x2\xFA\xFB\a,\x2\x2"+
		"\xFB\x10C\x3\x2\x2\x2\xFC\xFD\a\r\x2\x2\xFD\xFE\a+\x2\x2\xFE\xFF\x5\x30"+
		"\x19\x2\xFF\x100\a,\x2\x2\x100\x10C\x3\x2\x2\x2\x101\x10A\a\r\x2\x2\x102"+
		"\x10A\a\x11\x2\x2\x103\x10A\a\xF\x2\x2\x104\x10A\a\x10\x2\x2\x105\x10A"+
		"\a\xE\x2\x2\x106\x10A\x5\x2\x2\x2\x107\x10A\x5\x4\x3\x2\x108\x10A\x5\x34"+
		"\x1B\x2\x109\x101\x3\x2\x2\x2\x109\x102\x3\x2\x2\x2\x109\x103\x3\x2\x2"+
		"\x2\x109\x104\x3\x2\x2\x2\x109\x105\x3\x2\x2\x2\x109\x106\x3\x2\x2\x2"+
		"\x109\x107\x3\x2\x2\x2\x109\x108\x3\x2\x2\x2\x10A\x10C\x3\x2\x2\x2\x10B"+
		"\xF0\x3\x2\x2\x2\x10B\xF3\x3\x2\x2\x2\x10B\xF8\x3\x2\x2\x2\x10B\xFC\x3"+
		"\x2\x2\x2\x10B\x109\x3\x2\x2\x2\x10C\x138\x3\x2\x2\x2\x10D\x10E\f\xF\x2"+
		"\x2\x10E\x10F\t\x4\x2\x2\x10F\x137\x5.\x18\x10\x110\x111\f\xE\x2\x2\x111"+
		"\x112\t\x5\x2\x2\x112\x137\x5.\x18\xF\x113\x114\f\r\x2\x2\x114\x115\t"+
		"\x6\x2\x2\x115\x137\x5.\x18\xE\x116\x117\f\f\x2\x2\x117\x118\t\a\x2\x2"+
		"\x118\x137\x5.\x18\r\x119\x11A\f\v\x2\x2\x11A\x11B\t\b\x2\x2\x11B\x137"+
		"\x5.\x18\f\x11C\x11D\f\n\x2\x2\x11D\x11E\a\x33\x2\x2\x11E\x137\x5.\x18"+
		"\v\x11F\x120\f\t\x2\x2\x120\x121\a\x35\x2\x2\x121\x137\x5.\x18\n\x122"+
		"\x123\f\b\x2\x2\x123\x124\a\x32\x2\x2\x124\x137\x5.\x18\t\x125\x126\f"+
		"\a\x2\x2\x126\x127\a\x37\x2\x2\x127\x137\x5.\x18\b\x128\x129\f\x6\x2\x2"+
		"\x129\x12A\a\x38\x2\x2\x12A\x137\x5.\x18\a\x12B\x12C\f\x5\x2\x2\x12C\x12D"+
		"\a\x13\x2\x2\x12D\x137\x5.\x18\x6\x12E\x12F\f\x4\x2\x2\x12F\x130\t\t\x2"+
		"\x2\x130\x137\x5.\x18\x5\x131\x132\f\x13\x2\x2\x132\x133\a\x39\x2\x2\x133"+
		"\x137\a\r\x2\x2\x134\x135\f\x12\x2\x2\x135\x137\t\n\x2\x2\x136\x10D\x3"+
		"\x2\x2\x2\x136\x110\x3\x2\x2\x2\x136\x113\x3\x2\x2\x2\x136\x116\x3\x2"+
		"\x2\x2\x136\x119\x3\x2\x2\x2\x136\x11C\x3\x2\x2\x2\x136\x11F\x3\x2\x2"+
		"\x2\x136\x122\x3\x2\x2\x2\x136\x125\x3\x2\x2\x2\x136\x128\x3\x2\x2\x2"+
		"\x136\x12B\x3\x2\x2\x2\x136\x12E\x3\x2\x2\x2\x136\x131\x3\x2\x2\x2\x136"+
		"\x134\x3\x2\x2\x2\x137\x13A\x3\x2\x2\x2\x138\x136\x3\x2\x2\x2\x138\x139"+
		"\x3\x2\x2\x2\x139/\x3\x2\x2\x2\x13A\x138\x3\x2\x2\x2\x13B\x13D\x5,\x17"+
		"\x2\x13C\x13B\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x31\x3\x2\x2\x2\x13E"+
		"\x140\x5:\x1E\x2\x13F\x13E\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2\x140\x33"+
		"\x3\x2\x2\x2\x141\x142\a/\x2\x2\x142\x143\x5\x30\x19\x2\x143\x144\a\x30"+
		"\x2\x2\x144\x35\x3\x2\x2\x2\x145\x148\x5*\x16\x2\x146\x148\x5\x6\x4\x2"+
		"\x147\x145\x3\x2\x2\x2\x147\x146\x3\x2\x2\x2\x148\x14B\x3\x2\x2\x2\x149"+
		"\x147\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A\x14D\x3\x2\x2\x2\x14B\x149"+
		"\x3\x2\x2\x2\x14C\x14E\x5@!\x2\x14D\x14C\x3\x2\x2\x2\x14D\x14E\x3\x2\x2"+
		"\x2\x14E\x152\x3\x2\x2\x2\x14F\x151\x5> \x2\x150\x14F\x3\x2\x2\x2\x151"+
		"\x154\x3\x2\x2\x2\x152\x150\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x37"+
		"\x3\x2\x2\x2\x154\x152\x3\x2\x2\x2\x155\x156\a\x3\x2\x2\x156\x157\a\r"+
		"\x2\x2\x157\x39\x3\x2\x2\x2\x158\x15D\x5\x38\x1D\x2\x159\x15A\a*\x2\x2"+
		"\x15A\x15C\x5\x38\x1D\x2\x15B\x159\x3\x2\x2\x2\x15C\x15F\x3\x2\x2\x2\x15D"+
		"\x15B\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E;\x3\x2\x2\x2\x15F\x15D\x3"+
		"\x2\x2\x2\x160\x161\a\r\x2\x2\x161\x162\a+\x2\x2\x162\x163\x5\x32\x1A"+
		"\x2\x163\x164\a,\x2\x2\x164\x165\x5\x12\n\x2\x165=\x3\x2\x2\x2\x166\x167"+
		"\a\n\x2\x2\x167\x168\t\x2\x2\x2\x168\x16C\a-\x2\x2\x169\x16B\x5<\x1F\x2"+
		"\x16A\x169\x3\x2\x2\x2\x16B\x16E\x3\x2\x2\x2\x16C\x16A\x3\x2\x2\x2\x16C"+
		"\x16D\x3\x2\x2\x2\x16D\x16F\x3\x2\x2\x2\x16E\x16C\x3\x2\x2\x2\x16F\x170"+
		"\a.\x2\x2\x170?\x3\x2\x2\x2\x171\x172\a\t\x2\x2\x172\x176\a-\x2\x2\x173"+
		"\x175\x5<\x1F\x2\x174\x173\x3\x2\x2\x2\x175\x178\x3\x2\x2\x2\x176\x174"+
		"\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2\x177\x179\x3\x2\x2\x2\x178\x176\x3"+
		"\x2\x2\x2\x179\x17A\a.\x2\x2\x17A\x41\x3\x2\x2\x2!U_\x65py|\x7F\x85\x8F"+
		"\x97\x9F\xA3\xAD\xB9\xC4\xDB\xE6\xED\x109\x10B\x136\x138\x13C\x13F\x147"+
		"\x149\x14D\x152\x15D\x16C\x176";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LibLSLCC
