//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Parser\LSL.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LibLSLCC.Parser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class LSLParser : Parser {
	public const int
		TYPE=1, DO=2, IF=3, ELSE=4, WHILE=5, FOR=6, DEFAULT=7, STATE=8, RETURN=9, 
		JUMP=10, ID=11, HEX_LITERAL=12, INT=13, FLOAT=14, QUOTED_STRING=15, SEMI_COLON=16, 
		EQUAL=17, LOGICAL_EQUAL=18, LOGICAL_NOT_EQUAL=19, LESS_THAN=20, GREATER_THAN=21, 
		LESS_THAN_EQUAL=22, GREATER_THAN_EQUAL=23, RIGHT_SHIFT=24, LEFT_SHIFT=25, 
		RIGHT_SHIFT_EQUAL=26, LEFT_SHIFT_EQUAL=27, MINUS=28, PLUS=29, MINUS_EQUAL=30, 
		PLUS_EQUAL=31, INCREMENT=32, DECREMENT=33, MUL=34, DIV=35, MOD=36, MUL_EQUAL=37, 
		DIV_EQUAL=38, MOD_EQUAL=39, COMMA=40, O_PAREN=41, C_PAREN=42, O_BRACE=43, 
		C_BRACE=44, O_BRACKET=45, C_BRACKET=46, LABEL_PREFIX=47, BITWISE_OR=48, 
		BITWISE_AND=49, BITWISE_NOT=50, BITWISE_XOR=51, LOGICAL_NOT=52, LOGICAL_AND=53, 
		LOGICAL_OR=54, DOT=55, Whitespace=56, Newline=57, BlockComment=58, LineComment=59;
	public const int
		RULE_vectorLiteral = 0, RULE_rotationLiteral = 1, RULE_functionDeclaration = 2, 
		RULE_codeScopeOrSingleBlockStatement = 3, RULE_elseIfStatement = 4, RULE_elseStatement = 5, 
		RULE_ifStatement = 6, RULE_controlStructure = 7, RULE_codeScope = 8, RULE_doLoop = 9, 
		RULE_whileLoop = 10, RULE_forLoop = 11, RULE_loopStructure = 12, RULE_codeStatement = 13, 
		RULE_expressionStatement = 14, RULE_returnStatement = 15, RULE_labelStatement = 16, 
		RULE_jumpStatement = 17, RULE_stateChangeStatement = 18, RULE_localVariableDeclaration = 19, 
		RULE_globalVariableDeclaration = 20, RULE_expressionListTail = 21, RULE_expressionList = 22, 
		RULE_dotAccessorExpr = 23, RULE_modifiableLeftValue = 24, RULE_expression = 25, 
		RULE_optionalExpressionList = 26, RULE_optionalParameterList = 27, RULE_listLiteral = 28, 
		RULE_compilationUnit = 29, RULE_parameterDefinition = 30, RULE_parameterList = 31, 
		RULE_eventHandler = 32, RULE_definedState = 33, RULE_defaultState = 34;
	public static readonly string[] ruleNames = {
		"vectorLiteral", "rotationLiteral", "functionDeclaration", "codeScopeOrSingleBlockStatement", 
		"elseIfStatement", "elseStatement", "ifStatement", "controlStructure", 
		"codeScope", "doLoop", "whileLoop", "forLoop", "loopStructure", "codeStatement", 
		"expressionStatement", "returnStatement", "labelStatement", "jumpStatement", 
		"stateChangeStatement", "localVariableDeclaration", "globalVariableDeclaration", 
		"expressionListTail", "expressionList", "dotAccessorExpr", "modifiableLeftValue", 
		"expression", "optionalExpressionList", "optionalParameterList", "listLiteral", 
		"compilationUnit", "parameterDefinition", "parameterList", "eventHandler", 
		"definedState", "defaultState"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'do'", "'if'", "'else'", "'while'", "'for'", "'default'", 
		"'state'", "'return'", "'jump'", null, null, null, null, null, "';'", 
		"'='", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'>>'", "'<<'", "'>>='", 
		"'<<='", "'-'", "'+'", "'-='", "'+='", "'++'", "'--'", "'*'", "'/'", "'%'", 
		"'*='", "'/='", "'%='", "','", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"'@'", "'|'", "'&'", "'~'", "'^'", "'!'", "'&&'", "'||'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TYPE", "DO", "IF", "ELSE", "WHILE", "FOR", "DEFAULT", "STATE", 
		"RETURN", "JUMP", "ID", "HEX_LITERAL", "INT", "FLOAT", "QUOTED_STRING", 
		"SEMI_COLON", "EQUAL", "LOGICAL_EQUAL", "LOGICAL_NOT_EQUAL", "LESS_THAN", 
		"GREATER_THAN", "LESS_THAN_EQUAL", "GREATER_THAN_EQUAL", "RIGHT_SHIFT", 
		"LEFT_SHIFT", "RIGHT_SHIFT_EQUAL", "LEFT_SHIFT_EQUAL", "MINUS", "PLUS", 
		"MINUS_EQUAL", "PLUS_EQUAL", "INCREMENT", "DECREMENT", "MUL", "DIV", "MOD", 
		"MUL_EQUAL", "DIV_EQUAL", "MOD_EQUAL", "COMMA", "O_PAREN", "C_PAREN", 
		"O_BRACE", "C_BRACE", "O_BRACKET", "C_BRACKET", "LABEL_PREFIX", "BITWISE_OR", 
		"BITWISE_AND", "BITWISE_NOT", "BITWISE_XOR", "LOGICAL_NOT", "LOGICAL_AND", 
		"LOGICAL_OR", "DOT", "Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LSLParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class VectorLiteralContext : ParserRuleContext {
		public ExpressionContext vector_x;
		public IToken comma_one;
		public ExpressionContext vector_y;
		public IToken comma_two;
		public ExpressionContext vector_z;
		public ITerminalNode LESS_THAN() { return GetToken(LSLParser.LESS_THAN, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(LSLParser.GREATER_THAN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LSLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LSLParser.COMMA, i);
		}
		public VectorLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterVectorLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitVectorLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorLiteralContext vectorLiteral() {
		VectorLiteralContext _localctx = new VectorLiteralContext(Context, State);
		EnterRule(_localctx, 0, RULE_vectorLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(LESS_THAN);
			State = 71; _localctx.vector_x = expression(0);
			State = 72; _localctx.comma_one = Match(COMMA);
			State = 73; _localctx.vector_y = expression(0);
			State = 74; _localctx.comma_two = Match(COMMA);
			State = 75; _localctx.vector_z = expression(0);
			State = 76; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RotationLiteralContext : ParserRuleContext {
		public ExpressionContext rotation_x;
		public IToken comma_one;
		public ExpressionContext rotation_y;
		public IToken comma_two;
		public ExpressionContext rotation_z;
		public IToken comma_three;
		public ExpressionContext rotation_s;
		public ITerminalNode LESS_THAN() { return GetToken(LSLParser.LESS_THAN, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(LSLParser.GREATER_THAN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LSLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LSLParser.COMMA, i);
		}
		public RotationLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rotationLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterRotationLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitRotationLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRotationLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RotationLiteralContext rotationLiteral() {
		RotationLiteralContext _localctx = new RotationLiteralContext(Context, State);
		EnterRule(_localctx, 2, RULE_rotationLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(LESS_THAN);
			State = 79; _localctx.rotation_x = expression(0);
			State = 80; _localctx.comma_one = Match(COMMA);
			State = 81; _localctx.rotation_y = expression(0);
			State = 82; _localctx.comma_two = Match(COMMA);
			State = 83; _localctx.rotation_z = expression(0);
			State = 84; _localctx.comma_three = Match(COMMA);
			State = 85; _localctx.rotation_s = expression(0);
			State = 86; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public IToken return_type;
		public IToken function_name;
		public IToken open_parenth;
		public OptionalParameterListContext parameters;
		public IToken close_parenth;
		public CodeScopeContext code;
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public OptionalParameterListContext optionalParameterList() {
			return GetRuleContext<OptionalParameterListContext>(0);
		}
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public CodeScopeContext codeScope() {
			return GetRuleContext<CodeScopeContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(LSLParser.TYPE, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			_la = TokenStream.La(1);
			if (_la==TYPE) {
				{
				State = 88; _localctx.return_type = Match(TYPE);
				}
			}

			State = 91; _localctx.function_name = Match(ID);
			State = 92; _localctx.open_parenth = Match(O_PAREN);
			State = 93; _localctx.parameters = optionalParameterList();
			State = 94; _localctx.close_parenth = Match(C_PAREN);
			State = 95; _localctx.code = codeScope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeScopeOrSingleBlockStatementContext : ParserRuleContext {
		public CodeScopeContext code;
		public CodeStatementContext statement;
		public CodeScopeContext codeScope() {
			return GetRuleContext<CodeScopeContext>(0);
		}
		public CodeStatementContext codeStatement() {
			return GetRuleContext<CodeStatementContext>(0);
		}
		public CodeScopeOrSingleBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeScopeOrSingleBlockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterCodeScopeOrSingleBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitCodeScopeOrSingleBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeScopeOrSingleBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeScopeOrSingleBlockStatementContext codeScopeOrSingleBlockStatement() {
		CodeScopeOrSingleBlockStatementContext _localctx = new CodeScopeOrSingleBlockStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_codeScopeOrSingleBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 97; _localctx.code = codeScope();
				}
				break;
			case 2:
				{
				State = 98; _localctx.statement = codeStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public IToken else_keyword;
		public IToken if_keyword;
		public IToken open_parenth;
		public ExpressionContext condition;
		public IToken close_parenth;
		public CodeScopeOrSingleBlockStatementContext code;
		public ITerminalNode ELSE() { return GetToken(LSLParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(LSLParser.IF, 0); }
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public CodeScopeOrSingleBlockStatementContext codeScopeOrSingleBlockStatement() {
			return GetRuleContext<CodeScopeOrSingleBlockStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_elseIfStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; _localctx.else_keyword = Match(ELSE);
			State = 102; _localctx.if_keyword = Match(IF);
			State = 103; _localctx.open_parenth = Match(O_PAREN);
			State = 105;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACKET) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				State = 104; _localctx.condition = expression(0);
				}
			}

			State = 107; _localctx.close_parenth = Match(C_PAREN);
			State = 108; _localctx.code = codeScopeOrSingleBlockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public IToken else_keyword;
		public CodeScopeOrSingleBlockStatementContext code;
		public ITerminalNode ELSE() { return GetToken(LSLParser.ELSE, 0); }
		public CodeScopeOrSingleBlockStatementContext codeScopeOrSingleBlockStatement() {
			return GetRuleContext<CodeScopeOrSingleBlockStatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; _localctx.else_keyword = Match(ELSE);
			State = 111; _localctx.code = codeScopeOrSingleBlockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IToken if_keyword;
		public IToken open_parenth;
		public ExpressionContext condition;
		public IToken close_parenth;
		public CodeScopeOrSingleBlockStatementContext code;
		public ITerminalNode IF() { return GetToken(LSLParser.IF, 0); }
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public CodeScopeOrSingleBlockStatementContext codeScopeOrSingleBlockStatement() {
			return GetRuleContext<CodeScopeOrSingleBlockStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; _localctx.if_keyword = Match(IF);
			State = 114; _localctx.open_parenth = Match(O_PAREN);
			State = 116;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACKET) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				State = 115; _localctx.condition = expression(0);
				}
			}

			State = 118; _localctx.close_parenth = Match(C_PAREN);
			State = 119; _localctx.code = codeScopeOrSingleBlockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlStructureContext : ParserRuleContext {
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		public ControlStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlStructure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterControlStructure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitControlStructure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlStructureContext controlStructure() {
		ControlStructureContext _localctx = new ControlStructureContext(Context, State);
		EnterRule(_localctx, 14, RULE_controlStructure);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; ifStatement();
			State = 131;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				{
				State = 123;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 122; elseIfStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 125;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 128;
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 127; elseStatement();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				State = 130; elseStatement();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeScopeContext : ParserRuleContext {
		public IToken open_brace;
		public IToken close_brace;
		public ITerminalNode O_BRACE() { return GetToken(LSLParser.O_BRACE, 0); }
		public ITerminalNode C_BRACE() { return GetToken(LSLParser.C_BRACE, 0); }
		public CodeStatementContext[] codeStatement() {
			return GetRuleContexts<CodeStatementContext>();
		}
		public CodeStatementContext codeStatement(int i) {
			return GetRuleContext<CodeStatementContext>(i);
		}
		public CodeScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeScope; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterCodeScope(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitCodeScope(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeScopeContext codeScope() {
		CodeScopeContext _localctx = new CodeScopeContext(Context, State);
		EnterRule(_localctx, 16, RULE_codeScope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; _localctx.open_brace = Match(O_BRACE);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << DO) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << STATE) | (1L << RETURN) | (1L << JUMP) | (1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << SEMI_COLON) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACE) | (1L << O_BRACKET) | (1L << LABEL_PREFIX) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				{
				State = 134; codeStatement();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 140; _localctx.close_brace = Match(C_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopContext : ParserRuleContext {
		public IToken loop_keyword;
		public CodeScopeOrSingleBlockStatementContext code;
		public IToken while_keyword;
		public IToken open_parenth;
		public ExpressionContext loop_condition;
		public IToken close_parenth;
		public IToken semi_colon;
		public ITerminalNode DO() { return GetToken(LSLParser.DO, 0); }
		public CodeScopeOrSingleBlockStatementContext codeScopeOrSingleBlockStatement() {
			return GetRuleContext<CodeScopeOrSingleBlockStatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(LSLParser.WHILE, 0); }
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterDoLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitDoLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopContext doLoop() {
		DoLoopContext _localctx = new DoLoopContext(Context, State);
		EnterRule(_localctx, 18, RULE_doLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; _localctx.loop_keyword = Match(DO);
			State = 143; _localctx.code = codeScopeOrSingleBlockStatement();
			State = 144; _localctx.while_keyword = Match(WHILE);
			State = 145; _localctx.open_parenth = Match(O_PAREN);
			State = 147;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACKET) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				State = 146; _localctx.loop_condition = expression(0);
				}
			}

			State = 149; _localctx.close_parenth = Match(C_PAREN);
			State = 150; _localctx.semi_colon = Match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public IToken loop_keyword;
		public IToken open_parenth;
		public ExpressionContext loop_condition;
		public IToken close_parenth;
		public CodeScopeOrSingleBlockStatementContext code;
		public ITerminalNode WHILE() { return GetToken(LSLParser.WHILE, 0); }
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public CodeScopeOrSingleBlockStatementContext codeScopeOrSingleBlockStatement() {
			return GetRuleContext<CodeScopeOrSingleBlockStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 20, RULE_whileLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; _localctx.loop_keyword = Match(WHILE);
			State = 153; _localctx.open_parenth = Match(O_PAREN);
			State = 155;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACKET) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				State = 154; _localctx.loop_condition = expression(0);
				}
			}

			State = 157; _localctx.close_parenth = Match(C_PAREN);
			State = 158; _localctx.code = codeScopeOrSingleBlockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		public IToken loop_keyword;
		public IToken open_parenth;
		public OptionalExpressionListContext loop_init;
		public IToken first_semi_colon;
		public ExpressionContext loop_condition;
		public IToken second_semi_colon;
		public OptionalExpressionListContext expression_list;
		public IToken close_parenth;
		public CodeScopeOrSingleBlockStatementContext code;
		public ITerminalNode FOR() { return GetToken(LSLParser.FOR, 0); }
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public OptionalExpressionListContext[] optionalExpressionList() {
			return GetRuleContexts<OptionalExpressionListContext>();
		}
		public OptionalExpressionListContext optionalExpressionList(int i) {
			return GetRuleContext<OptionalExpressionListContext>(i);
		}
		public ITerminalNode[] SEMI_COLON() { return GetTokens(LSLParser.SEMI_COLON); }
		public ITerminalNode SEMI_COLON(int i) {
			return GetToken(LSLParser.SEMI_COLON, i);
		}
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public CodeScopeOrSingleBlockStatementContext codeScopeOrSingleBlockStatement() {
			return GetRuleContext<CodeScopeOrSingleBlockStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterForLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitForLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 22, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; _localctx.loop_keyword = Match(FOR);
			State = 161; _localctx.open_parenth = Match(O_PAREN);
			State = 162; _localctx.loop_init = optionalExpressionList();
			State = 163; _localctx.first_semi_colon = Match(SEMI_COLON);
			State = 165;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACKET) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				State = 164; _localctx.loop_condition = expression(0);
				}
			}

			State = 167; _localctx.second_semi_colon = Match(SEMI_COLON);
			State = 168; _localctx.expression_list = optionalExpressionList();
			State = 169; _localctx.close_parenth = Match(C_PAREN);
			State = 170; _localctx.code = codeScopeOrSingleBlockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStructureContext : ParserRuleContext {
		public DoLoopContext do_loop;
		public ForLoopContext for_loop;
		public WhileLoopContext while_loop;
		public DoLoopContext doLoop() {
			return GetRuleContext<DoLoopContext>(0);
		}
		public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		public LoopStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStructure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterLoopStructure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitLoopStructure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStructureContext loopStructure() {
		LoopStructureContext _localctx = new LoopStructureContext(Context, State);
		EnterRule(_localctx, 24, RULE_loopStructure);
		try {
			State = 175;
			switch (TokenStream.La(1)) {
			case DO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172; _localctx.do_loop = doLoop();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173; _localctx.for_loop = forLoop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 174; _localctx.while_loop = whileLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext variable_declaration;
		public ExpressionStatementContext expression_statement;
		public ReturnStatementContext return_statement;
		public JumpStatementContext jump_statement;
		public LabelStatementContext label_statement;
		public StateChangeStatementContext state_change_statement;
		public ControlStructureContext control_structure;
		public LoopStructureContext loop_structure;
		public CodeScopeContext code_scope;
		public IToken semi_colon;
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		public LabelStatementContext labelStatement() {
			return GetRuleContext<LabelStatementContext>(0);
		}
		public StateChangeStatementContext stateChangeStatement() {
			return GetRuleContext<StateChangeStatementContext>(0);
		}
		public ControlStructureContext controlStructure() {
			return GetRuleContext<ControlStructureContext>(0);
		}
		public LoopStructureContext loopStructure() {
			return GetRuleContext<LoopStructureContext>(0);
		}
		public CodeScopeContext codeScope() {
			return GetRuleContext<CodeScopeContext>(0);
		}
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public CodeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterCodeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitCodeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeStatementContext codeStatement() {
		CodeStatementContext _localctx = new CodeStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_codeStatement);
		try {
			State = 187;
			switch (TokenStream.La(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177; _localctx.variable_declaration = localVariableDeclaration();
				}
				break;
			case ID:
			case HEX_LITERAL:
			case INT:
			case FLOAT:
			case QUOTED_STRING:
			case LESS_THAN:
			case MINUS:
			case PLUS:
			case INCREMENT:
			case DECREMENT:
			case O_PAREN:
			case O_BRACKET:
			case BITWISE_NOT:
			case LOGICAL_NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178; _localctx.expression_statement = expressionStatement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 179; _localctx.return_statement = returnStatement();
				}
				break;
			case JUMP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 180; _localctx.jump_statement = jumpStatement();
				}
				break;
			case LABEL_PREFIX:
				EnterOuterAlt(_localctx, 5);
				{
				State = 181; _localctx.label_statement = labelStatement();
				}
				break;
			case STATE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 182; _localctx.state_change_statement = stateChangeStatement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 183; _localctx.control_structure = controlStructure();
				}
				break;
			case DO:
			case WHILE:
			case FOR:
				EnterOuterAlt(_localctx, 8);
				{
				State = 184; _localctx.loop_structure = loopStructure();
				}
				break;
			case O_BRACE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 185; _localctx.code_scope = codeScope();
				}
				break;
			case SEMI_COLON:
				EnterOuterAlt(_localctx, 10);
				{
				State = 186; _localctx.semi_colon = Match(SEMI_COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression_rule;
		public IToken semi_colon;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; _localctx.expression_rule = expression(0);
			State = 190; _localctx.semi_colon = Match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public IToken return_keyword;
		public ExpressionContext return_expression;
		public IToken semi_colon;
		public ITerminalNode RETURN() { return GetToken(LSLParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_returnStatement);
		try {
			State = 198;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192; _localctx.return_keyword = Match(RETURN);
				State = 193; _localctx.return_expression = expression(0);
				State = 194; _localctx.semi_colon = Match(SEMI_COLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196; _localctx.return_keyword = Match(RETURN);
				State = 197; _localctx.semi_colon = Match(SEMI_COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelStatementContext : ParserRuleContext {
		public IToken label_prefix;
		public IToken label_name;
		public IToken semi_colon;
		public ITerminalNode LABEL_PREFIX() { return GetToken(LSLParser.LABEL_PREFIX, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public LabelStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterLabelStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitLabelStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelStatementContext labelStatement() {
		LabelStatementContext _localctx = new LabelStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_labelStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; _localctx.label_prefix = Match(LABEL_PREFIX);
			State = 201; _localctx.label_name = Match(ID);
			State = 202; _localctx.semi_colon = Match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		public IToken jump_keyword;
		public IToken jump_target;
		public IToken semi_colon;
		public ITerminalNode JUMP() { return GetToken(LSLParser.JUMP, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterJumpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitJumpStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_jumpStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; _localctx.jump_keyword = Match(JUMP);
			State = 205; _localctx.jump_target = Match(ID);
			State = 206; _localctx.semi_colon = Match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateChangeStatementContext : ParserRuleContext {
		public IToken state_keyword;
		public IToken state_target;
		public IToken semi_colon;
		public ITerminalNode STATE() { return GetToken(LSLParser.STATE, 0); }
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ITerminalNode DEFAULT() { return GetToken(LSLParser.DEFAULT, 0); }
		public StateChangeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateChangeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterStateChangeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitStateChangeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateChangeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateChangeStatementContext stateChangeStatement() {
		StateChangeStatementContext _localctx = new StateChangeStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_stateChangeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; _localctx.state_keyword = Match(STATE);
			State = 209;
			_localctx.state_target = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==DEFAULT || _la==ID) ) {
				_localctx.state_target = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 210; _localctx.semi_colon = Match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public IToken variable_type;
		public IToken variable_name;
		public IToken operation;
		public ExpressionContext variable_value;
		public IToken semi_colon;
		public ITerminalNode TYPE() { return GetToken(LSLParser.TYPE, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ITerminalNode EQUAL() { return GetToken(LSLParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_localVariableDeclaration);
		try {
			State = 221;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212; _localctx.variable_type = Match(TYPE);
				State = 213; _localctx.variable_name = Match(ID);
				State = 214; _localctx.operation = Match(EQUAL);
				State = 215; _localctx.variable_value = expression(0);
				State = 216; _localctx.semi_colon = Match(SEMI_COLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218; _localctx.variable_type = Match(TYPE);
				State = 219; _localctx.variable_name = Match(ID);
				State = 220; _localctx.semi_colon = Match(SEMI_COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableDeclarationContext : ParserRuleContext {
		public IToken variable_type;
		public IToken variable_name;
		public IToken operation;
		public ExpressionContext variable_value;
		public IToken semi_colon;
		public ITerminalNode TYPE() { return GetToken(LSLParser.TYPE, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ITerminalNode EQUAL() { return GetToken(LSLParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI_COLON() { return GetToken(LSLParser.SEMI_COLON, 0); }
		public GlobalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterGlobalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitGlobalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableDeclarationContext globalVariableDeclaration() {
		GlobalVariableDeclarationContext _localctx = new GlobalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_globalVariableDeclaration);
		try {
			State = 232;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; _localctx.variable_type = Match(TYPE);
				State = 224; _localctx.variable_name = Match(ID);
				State = 225; _localctx.operation = Match(EQUAL);
				State = 226; _localctx.variable_value = expression(0);
				State = 227; _localctx.semi_colon = Match(SEMI_COLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229; _localctx.variable_type = Match(TYPE);
				State = 230; _localctx.variable_name = Match(ID);
				State = 231; _localctx.semi_colon = Match(SEMI_COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListTailContext : ParserRuleContext {
		public IToken comma;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(LSLParser.COMMA, 0); }
		public ExpressionListTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionListTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpressionListTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpressionListTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionListTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListTailContext expressionListTail() {
		ExpressionListTailContext _localctx = new ExpressionListTailContext(Context, State);
		EnterRule(_localctx, 42, RULE_expressionListTail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; _localctx.comma = Match(COMMA);
			State = 235; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListTailContext[] expressionListTail() {
			return GetRuleContexts<ExpressionListTailContext>();
		}
		public ExpressionListTailContext expressionListTail(int i) {
			return GetRuleContext<ExpressionListTailContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 44, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; expression(0);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 238; expressionListTail();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotAccessorExprContext : ParserRuleContext {
		public IToken expr_lvalue;
		public IToken operation;
		public IToken member;
		public ITerminalNode[] ID() { return GetTokens(LSLParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(LSLParser.ID, i);
		}
		public ITerminalNode DOT() { return GetToken(LSLParser.DOT, 0); }
		public DotAccessorExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotAccessorExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterDotAccessorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitDotAccessorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotAccessorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotAccessorExprContext dotAccessorExpr() {
		DotAccessorExprContext _localctx = new DotAccessorExprContext(Context, State);
		EnterRule(_localctx, 46, RULE_dotAccessorExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; _localctx.expr_lvalue = Match(ID);
			State = 245; _localctx.operation = Match(DOT);
			State = 246; _localctx.member = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifiableLeftValueContext : ParserRuleContext {
		public IToken variable;
		public DotAccessorExprContext dotAccessorExpr() {
			return GetRuleContext<DotAccessorExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ModifiableLeftValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifiableLeftValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterModifiableLeftValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitModifiableLeftValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifiableLeftValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifiableLeftValueContext modifiableLeftValue() {
		ModifiableLeftValueContext _localctx = new ModifiableLeftValueContext(Context, State);
		EnterRule(_localctx, 48, RULE_modifiableLeftValue);
		try {
			State = 250;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 248; dotAccessorExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249; _localctx.variable = Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr_PrefixOperationContext : ExpressionContext {
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INCREMENT() { return GetToken(LSLParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(LSLParser.DECREMENT, 0); }
		public ITerminalNode MINUS() { return GetToken(LSLParser.MINUS, 0); }
		public ITerminalNode PLUS() { return GetToken(LSLParser.PLUS, 0); }
		public ITerminalNode LOGICAL_NOT() { return GetToken(LSLParser.LOGICAL_NOT, 0); }
		public ITerminalNode BITWISE_NOT() { return GetToken(LSLParser.BITWISE_NOT, 0); }
		public Expr_PrefixOperationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_PrefixOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_PrefixOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_PrefixOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public IToken open_parenth;
		public ExpressionContext expr_value;
		public IToken close_parenth;
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_AtomContext : ExpressionContext {
		public IToken variable;
		public IToken string_literal;
		public IToken integer_literal;
		public IToken float_literal;
		public IToken hex_literal;
		public VectorLiteralContext vector_literal;
		public RotationLiteralContext rotation_literal;
		public ListLiteralContext list_literal;
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ITerminalNode QUOTED_STRING() { return GetToken(LSLParser.QUOTED_STRING, 0); }
		public ITerminalNode INT() { return GetToken(LSLParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(LSLParser.FLOAT, 0); }
		public ITerminalNode HEX_LITERAL() { return GetToken(LSLParser.HEX_LITERAL, 0); }
		public VectorLiteralContext vectorLiteral() {
			return GetRuleContext<VectorLiteralContext>(0);
		}
		public RotationLiteralContext rotationLiteral() {
			return GetRuleContext<RotationLiteralContext>(0);
		}
		public ListLiteralContext listLiteral() {
			return GetRuleContext<ListLiteralContext>(0);
		}
		public Expr_AtomContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_Atom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_Atom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_Atom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_TypeCastContext : ExpressionContext {
		public IToken open_parenth;
		public IToken cast_type;
		public IToken close_parenth;
		public ExpressionContext expr_rvalue;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public ITerminalNode TYPE() { return GetToken(LSLParser.TYPE, 0); }
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public Expr_TypeCastContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_TypeCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_TypeCast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_TypeCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_DotAccessorExprContext : ExpressionContext {
		public DotAccessorExprContext dotAccessorExpr() {
			return GetRuleContext<DotAccessorExprContext>(0);
		}
		public Expr_DotAccessorExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_DotAccessorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_DotAccessorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_DotAccessorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_BitwiseShiftContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LEFT_SHIFT() { return GetToken(LSLParser.LEFT_SHIFT, 0); }
		public ITerminalNode RIGHT_SHIFT() { return GetToken(LSLParser.RIGHT_SHIFT, 0); }
		public Expr_BitwiseShiftContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_BitwiseShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_BitwiseShift(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_BitwiseShift(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_LogicalCompareContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LESS_THAN() { return GetToken(LSLParser.LESS_THAN, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(LSLParser.GREATER_THAN, 0); }
		public ITerminalNode GREATER_THAN_EQUAL() { return GetToken(LSLParser.GREATER_THAN_EQUAL, 0); }
		public ITerminalNode LESS_THAN_EQUAL() { return GetToken(LSLParser.LESS_THAN_EQUAL, 0); }
		public Expr_LogicalCompareContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_LogicalCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_LogicalCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_LogicalCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_LogicalEqualityContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LOGICAL_EQUAL() { return GetToken(LSLParser.LOGICAL_EQUAL, 0); }
		public ITerminalNode LOGICAL_NOT_EQUAL() { return GetToken(LSLParser.LOGICAL_NOT_EQUAL, 0); }
		public Expr_LogicalEqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_LogicalEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_LogicalEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_LogicalEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_BitwiseOrContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BITWISE_OR() { return GetToken(LSLParser.BITWISE_OR, 0); }
		public Expr_BitwiseOrContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_BitwiseOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_BitwiseOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_BitwiseOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_Logical_And_OrContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LOGICAL_AND() { return GetToken(LSLParser.LOGICAL_AND, 0); }
		public ITerminalNode LOGICAL_OR() { return GetToken(LSLParser.LOGICAL_OR, 0); }
		public Expr_Logical_And_OrContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_Logical_And_Or(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_Logical_And_Or(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_Logical_And_Or(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_BitwiseXorContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BITWISE_XOR() { return GetToken(LSLParser.BITWISE_XOR, 0); }
		public Expr_BitwiseXorContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_BitwiseXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_BitwiseXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_BitwiseXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_AssignmentContext : ExpressionContext {
		public ModifiableLeftValueContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ModifiableLeftValueContext modifiableLeftValue() {
			return GetRuleContext<ModifiableLeftValueContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(LSLParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expr_AssignmentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_Assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_Assignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_Assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_MultDivModContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(LSLParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(LSLParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(LSLParser.MOD, 0); }
		public Expr_MultDivModContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_MultDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_MultDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_MultDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_BitwiseAndContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BITWISE_AND() { return GetToken(LSLParser.BITWISE_AND, 0); }
		public Expr_BitwiseAndContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_BitwiseAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_BitwiseAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_BitwiseAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_PostfixOperationContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INCREMENT() { return GetToken(LSLParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(LSLParser.DECREMENT, 0); }
		public Expr_PostfixOperationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_PostfixOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_PostfixOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_PostfixOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_ModifyingAssignmentContext : ExpressionContext {
		public ModifiableLeftValueContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ModifiableLeftValueContext modifiableLeftValue() {
			return GetRuleContext<ModifiableLeftValueContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PLUS_EQUAL() { return GetToken(LSLParser.PLUS_EQUAL, 0); }
		public ITerminalNode MINUS_EQUAL() { return GetToken(LSLParser.MINUS_EQUAL, 0); }
		public ITerminalNode MUL_EQUAL() { return GetToken(LSLParser.MUL_EQUAL, 0); }
		public ITerminalNode DIV_EQUAL() { return GetToken(LSLParser.DIV_EQUAL, 0); }
		public ITerminalNode MOD_EQUAL() { return GetToken(LSLParser.MOD_EQUAL, 0); }
		public Expr_ModifyingAssignmentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_ModifyingAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_ModifyingAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_ModifyingAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_FunctionCallContext : ExpressionContext {
		public IToken function_name;
		public IToken open_parenth;
		public OptionalExpressionListContext expression_list;
		public IToken close_parenth;
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public OptionalExpressionListContext optionalExpressionList() {
			return GetRuleContext<OptionalExpressionListContext>(0);
		}
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public Expr_FunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_FunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_FunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_FunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_AddSubContext : ExpressionContext {
		public ExpressionContext expr_lvalue;
		public IToken operation;
		public ExpressionContext expr_rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(LSLParser.MINUS, 0); }
		public ITerminalNode PLUS() { return GetToken(LSLParser.PLUS, 0); }
		public Expr_AddSubContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterExpr_AddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitExpr_AddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_AddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				_localctx = new Expr_PrefixOperationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 253;
				((Expr_PrefixOperationContext)_localctx).operation = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) ) {
					((Expr_PrefixOperationContext)_localctx).operation = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 254; ((Expr_PrefixOperationContext)_localctx).expr_rvalue = expression(14);
				}
				break;
			case 2:
				{
				_localctx = new Expr_TypeCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				{
				State = 255; ((Expr_TypeCastContext)_localctx).open_parenth = Match(O_PAREN);
				State = 256; ((Expr_TypeCastContext)_localctx).cast_type = Match(TYPE);
				State = 257; ((Expr_TypeCastContext)_localctx).close_parenth = Match(C_PAREN);
				}
				State = 259; ((Expr_TypeCastContext)_localctx).expr_rvalue = expression(13);
				}
				break;
			case 3:
				{
				_localctx = new Expr_ModifyingAssignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 260; ((Expr_ModifyingAssignmentContext)_localctx).expr_lvalue = modifiableLeftValue();
				State = 261;
				((Expr_ModifyingAssignmentContext)_localctx).operation = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS_EQUAL) | (1L << PLUS_EQUAL) | (1L << MUL_EQUAL) | (1L << DIV_EQUAL) | (1L << MOD_EQUAL))) != 0)) ) {
					((Expr_ModifyingAssignmentContext)_localctx).operation = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 262; ((Expr_ModifyingAssignmentContext)_localctx).expr_rvalue = expression(3);
				}
				break;
			case 4:
				{
				_localctx = new Expr_AssignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 264; ((Expr_AssignmentContext)_localctx).expr_lvalue = modifiableLeftValue();
				State = 265; ((Expr_AssignmentContext)_localctx).operation = Match(EQUAL);
				State = 266; ((Expr_AssignmentContext)_localctx).expr_rvalue = expression(2);
				}
				break;
			case 5:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 268; ((ParenthesizedExpressionContext)_localctx).open_parenth = Match(O_PAREN);
				State = 269; ((ParenthesizedExpressionContext)_localctx).expr_value = expression(0);
				State = 270; ((ParenthesizedExpressionContext)_localctx).close_parenth = Match(C_PAREN);
				}
				break;
			case 6:
				{
				_localctx = new Expr_FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 272; ((Expr_FunctionCallContext)_localctx).function_name = Match(ID);
				{
				State = 273; ((Expr_FunctionCallContext)_localctx).open_parenth = Match(O_PAREN);
				State = 274; ((Expr_FunctionCallContext)_localctx).expression_list = optionalExpressionList();
				State = 275; ((Expr_FunctionCallContext)_localctx).close_parenth = Match(C_PAREN);
				}
				}
				break;
			case 7:
				{
				_localctx = new Expr_DotAccessorExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 277; dotAccessorExpr();
				}
				break;
			case 8:
				{
				_localctx = new Expr_AtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 286;
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 278; ((Expr_AtomContext)_localctx).variable = Match(ID);
					}
					break;
				case 2:
					{
					State = 279; ((Expr_AtomContext)_localctx).string_literal = Match(QUOTED_STRING);
					}
					break;
				case 3:
					{
					State = 280; ((Expr_AtomContext)_localctx).integer_literal = Match(INT);
					}
					break;
				case 4:
					{
					State = 281; ((Expr_AtomContext)_localctx).float_literal = Match(FLOAT);
					}
					break;
				case 5:
					{
					State = 282; ((Expr_AtomContext)_localctx).hex_literal = Match(HEX_LITERAL);
					}
					break;
				case 6:
					{
					State = 283; ((Expr_AtomContext)_localctx).vector_literal = vectorLiteral();
					}
					break;
				case 7:
					{
					State = 284; ((Expr_AtomContext)_localctx).rotation_literal = rotationLiteral();
					}
					break;
				case 8:
					{
					State = 285; ((Expr_AtomContext)_localctx).list_literal = listLiteral();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 321;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 319;
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new Expr_MultDivModContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_MultDivModContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 290;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 291;
						((Expr_MultDivModContext)_localctx).operation = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((Expr_MultDivModContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 292; ((Expr_MultDivModContext)_localctx).expr_rvalue = expression(13);
						}
						break;
					case 2:
						{
						_localctx = new Expr_AddSubContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_AddSubContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 293;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 294;
						((Expr_AddSubContext)_localctx).operation = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
							((Expr_AddSubContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 295; ((Expr_AddSubContext)_localctx).expr_rvalue = expression(12);
						}
						break;
					case 3:
						{
						_localctx = new Expr_BitwiseShiftContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_BitwiseShiftContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 296;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 297;
						((Expr_BitwiseShiftContext)_localctx).operation = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==RIGHT_SHIFT || _la==LEFT_SHIFT) ) {
							((Expr_BitwiseShiftContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 298; ((Expr_BitwiseShiftContext)_localctx).expr_rvalue = expression(11);
						}
						break;
					case 4:
						{
						_localctx = new Expr_LogicalCompareContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_LogicalCompareContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 299;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 300;
						((Expr_LogicalCompareContext)_localctx).operation = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS_THAN) | (1L << GREATER_THAN) | (1L << LESS_THAN_EQUAL) | (1L << GREATER_THAN_EQUAL))) != 0)) ) {
							((Expr_LogicalCompareContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 301; ((Expr_LogicalCompareContext)_localctx).expr_rvalue = expression(10);
						}
						break;
					case 5:
						{
						_localctx = new Expr_LogicalEqualityContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_LogicalEqualityContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 302;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 303;
						((Expr_LogicalEqualityContext)_localctx).operation = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==LOGICAL_EQUAL || _la==LOGICAL_NOT_EQUAL) ) {
							((Expr_LogicalEqualityContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 304; ((Expr_LogicalEqualityContext)_localctx).expr_rvalue = expression(9);
						}
						break;
					case 6:
						{
						_localctx = new Expr_BitwiseAndContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_BitwiseAndContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 305;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						{
						State = 306; ((Expr_BitwiseAndContext)_localctx).operation = Match(BITWISE_AND);
						}
						State = 307; ((Expr_BitwiseAndContext)_localctx).expr_rvalue = expression(8);
						}
						break;
					case 7:
						{
						_localctx = new Expr_BitwiseXorContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_BitwiseXorContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 308;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						{
						State = 309; ((Expr_BitwiseXorContext)_localctx).operation = Match(BITWISE_XOR);
						}
						State = 310; ((Expr_BitwiseXorContext)_localctx).expr_rvalue = expression(7);
						}
						break;
					case 8:
						{
						_localctx = new Expr_BitwiseOrContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_BitwiseOrContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 311;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						{
						State = 312; ((Expr_BitwiseOrContext)_localctx).operation = Match(BITWISE_OR);
						}
						State = 313; ((Expr_BitwiseOrContext)_localctx).expr_rvalue = expression(6);
						}
						break;
					case 9:
						{
						_localctx = new Expr_Logical_And_OrContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_Logical_And_OrContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 314;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 315;
						((Expr_Logical_And_OrContext)_localctx).operation = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==LOGICAL_AND || _la==LOGICAL_OR) ) {
							((Expr_Logical_And_OrContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 316; ((Expr_Logical_And_OrContext)_localctx).expr_rvalue = expression(5);
						}
						break;
					case 10:
						{
						_localctx = new Expr_PostfixOperationContext(new ExpressionContext(_parentctx, _parentState));
						((Expr_PostfixOperationContext)_localctx).expr_lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 317;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 318;
						((Expr_PostfixOperationContext)_localctx).operation = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==INCREMENT || _la==DECREMENT) ) {
							((Expr_PostfixOperationContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 323;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OptionalExpressionListContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public OptionalExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterOptionalExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitOptionalExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalExpressionListContext optionalExpressionList() {
		OptionalExpressionListContext _localctx = new OptionalExpressionListContext(Context, State);
		EnterRule(_localctx, 52, RULE_optionalExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << HEX_LITERAL) | (1L << INT) | (1L << FLOAT) | (1L << QUOTED_STRING) | (1L << LESS_THAN) | (1L << MINUS) | (1L << PLUS) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << O_PAREN) | (1L << O_BRACKET) | (1L << BITWISE_NOT) | (1L << LOGICAL_NOT))) != 0)) {
				{
				State = 324; expressionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalParameterListContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public OptionalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterOptionalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitOptionalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalParameterListContext optionalParameterList() {
		OptionalParameterListContext _localctx = new OptionalParameterListContext(Context, State);
		EnterRule(_localctx, 54, RULE_optionalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			_la = TokenStream.La(1);
			if (_la==TYPE) {
				{
				State = 327; parameterList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListLiteralContext : ParserRuleContext {
		public OptionalExpressionListContext expression_list;
		public ITerminalNode O_BRACKET() { return GetToken(LSLParser.O_BRACKET, 0); }
		public ITerminalNode C_BRACKET() { return GetToken(LSLParser.C_BRACKET, 0); }
		public OptionalExpressionListContext optionalExpressionList() {
			return GetRuleContext<OptionalExpressionListContext>(0);
		}
		public ListLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterListLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitListLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListLiteralContext listLiteral() {
		ListLiteralContext _localctx = new ListLiteralContext(Context, State);
		EnterRule(_localctx, 56, RULE_listLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(O_BRACKET);
			State = 331; _localctx.expression_list = optionalExpressionList();
			State = 332; Match(C_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public GlobalVariableDeclarationContext[] globalVariableDeclaration() {
			return GetRuleContexts<GlobalVariableDeclarationContext>();
		}
		public GlobalVariableDeclarationContext globalVariableDeclaration(int i) {
			return GetRuleContext<GlobalVariableDeclarationContext>(i);
		}
		public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		public DefaultStateContext defaultState() {
			return GetRuleContext<DefaultStateContext>(0);
		}
		public DefinedStateContext[] definedState() {
			return GetRuleContexts<DefinedStateContext>();
		}
		public DefinedStateContext definedState(int i) {
			return GetRuleContext<DefinedStateContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 58, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TYPE || _la==ID) {
				{
				State = 336;
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 334; globalVariableDeclaration();
					}
					break;
				case 2:
					{
					State = 335; functionDeclaration();
					}
					break;
				}
				}
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 342;
			_la = TokenStream.La(1);
			if (_la==DEFAULT) {
				{
				State = 341; defaultState();
				}
			}

			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==STATE) {
				{
				{
				State = 344; definedState();
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDefinitionContext : ParserRuleContext {
		public IToken parameter_type;
		public IToken parameter_name;
		public ITerminalNode TYPE() { return GetToken(LSLParser.TYPE, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ParameterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterParameterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitParameterDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDefinitionContext parameterDefinition() {
		ParameterDefinitionContext _localctx = new ParameterDefinitionContext(Context, State);
		EnterRule(_localctx, 60, RULE_parameterDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; _localctx.parameter_type = Match(TYPE);
			State = 351; _localctx.parameter_name = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterDefinitionContext[] parameterDefinition() {
			return GetRuleContexts<ParameterDefinitionContext>();
		}
		public ParameterDefinitionContext parameterDefinition(int i) {
			return GetRuleContext<ParameterDefinitionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LSLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LSLParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 62, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; parameterDefinition();
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 354; Match(COMMA);
				State = 355; parameterDefinition();
				}
				}
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventHandlerContext : ParserRuleContext {
		public IToken handler_name;
		public IToken open_parenth;
		public OptionalParameterListContext parameters;
		public IToken close_parenth;
		public CodeScopeContext code;
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ITerminalNode O_PAREN() { return GetToken(LSLParser.O_PAREN, 0); }
		public OptionalParameterListContext optionalParameterList() {
			return GetRuleContext<OptionalParameterListContext>(0);
		}
		public ITerminalNode C_PAREN() { return GetToken(LSLParser.C_PAREN, 0); }
		public CodeScopeContext codeScope() {
			return GetRuleContext<CodeScopeContext>(0);
		}
		public EventHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventHandler; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterEventHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitEventHandler(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventHandlerContext eventHandler() {
		EventHandlerContext _localctx = new EventHandlerContext(Context, State);
		EnterRule(_localctx, 64, RULE_eventHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; _localctx.handler_name = Match(ID);
			State = 362; _localctx.open_parenth = Match(O_PAREN);
			State = 363; _localctx.parameters = optionalParameterList();
			State = 364; _localctx.close_parenth = Match(C_PAREN);
			State = 365; _localctx.code = codeScope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinedStateContext : ParserRuleContext {
		public IToken state_keyword;
		public IToken state_name;
		public IToken open_brace;
		public IToken close_brace;
		public ITerminalNode STATE() { return GetToken(LSLParser.STATE, 0); }
		public ITerminalNode O_BRACE() { return GetToken(LSLParser.O_BRACE, 0); }
		public ITerminalNode C_BRACE() { return GetToken(LSLParser.C_BRACE, 0); }
		public ITerminalNode ID() { return GetToken(LSLParser.ID, 0); }
		public ITerminalNode DEFAULT() { return GetToken(LSLParser.DEFAULT, 0); }
		public EventHandlerContext[] eventHandler() {
			return GetRuleContexts<EventHandlerContext>();
		}
		public EventHandlerContext eventHandler(int i) {
			return GetRuleContext<EventHandlerContext>(i);
		}
		public DefinedStateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definedState; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterDefinedState(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitDefinedState(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinedState(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinedStateContext definedState() {
		DefinedStateContext _localctx = new DefinedStateContext(Context, State);
		EnterRule(_localctx, 66, RULE_definedState);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; _localctx.state_keyword = Match(STATE);
			State = 368;
			_localctx.state_name = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==DEFAULT || _la==ID) ) {
				_localctx.state_name = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 369; _localctx.open_brace = Match(O_BRACE);
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ID) {
				{
				{
				State = 370; eventHandler();
				}
				}
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 376; _localctx.close_brace = Match(C_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultStateContext : ParserRuleContext {
		public IToken state_name;
		public IToken open_brace;
		public IToken close_brace;
		public ITerminalNode DEFAULT() { return GetToken(LSLParser.DEFAULT, 0); }
		public ITerminalNode O_BRACE() { return GetToken(LSLParser.O_BRACE, 0); }
		public ITerminalNode C_BRACE() { return GetToken(LSLParser.C_BRACE, 0); }
		public EventHandlerContext[] eventHandler() {
			return GetRuleContexts<EventHandlerContext>();
		}
		public EventHandlerContext eventHandler(int i) {
			return GetRuleContext<EventHandlerContext>(i);
		}
		public DefaultStateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultState; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.EnterDefaultState(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSLListener typedListener = listener as ILSLListener;
			if (typedListener != null) typedListener.ExitDefaultState(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSLVisitor<TResult> typedVisitor = visitor as ILSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultState(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultStateContext defaultState() {
		DefaultStateContext _localctx = new DefaultStateContext(Context, State);
		EnterRule(_localctx, 68, RULE_defaultState);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; _localctx.state_name = Match(DEFAULT);
			State = 379; _localctx.open_brace = Match(O_BRACE);
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ID) {
				{
				{
				State = 380; eventHandler();
				}
				}
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 386; _localctx.close_brace = Match(C_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 25: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 15);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3=\x187\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4"+
		"\x5\x4\\\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x5\x5\x66"+
		"\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6l\n\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a"+
		"\x3\a\x3\b\x3\b\x3\b\x5\bw\n\b\x3\b\x3\b\x3\b\x3\t\x3\t\x6\t~\n\t\r\t"+
		"\xE\t\x7F\x3\t\x5\t\x83\n\t\x3\t\x5\t\x86\n\t\x3\n\x3\n\a\n\x8A\n\n\f"+
		"\n\xE\n\x8D\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x96\n\v\x3\v\x3"+
		"\v\x3\v\x3\f\x3\f\x3\f\x5\f\x9E\n\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x5\r\xA8\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x5\xE\xB2"+
		"\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF"+
		"\xBE\n\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x5\x11\xC9\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x5\x15\xE0\n\x15\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\xEB\n\x16\x3\x17\x3\x17\x3"+
		"\x17\x3\x18\x3\x18\a\x18\xF2\n\x18\f\x18\xE\x18\xF5\v\x18\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x1A\x3\x1A\x5\x1A\xFD\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x5\x1B\x121\n\x1B\x5\x1B\x123\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x142\n\x1B\f\x1B\xE\x1B\x145\v"+
		"\x1B\x3\x1C\x5\x1C\x148\n\x1C\x3\x1D\x5\x1D\x14B\n\x1D\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1F\x3\x1F\a\x1F\x153\n\x1F\f\x1F\xE\x1F\x156\v\x1F\x3"+
		"\x1F\x5\x1F\x159\n\x1F\x3\x1F\a\x1F\x15C\n\x1F\f\x1F\xE\x1F\x15F\v\x1F"+
		"\x3 \x3 \x3 \x3!\x3!\x3!\a!\x167\n!\f!\xE!\x16A\v!\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x3\"\x3#\x3#\x3#\x3#\a#\x176\n#\f#\xE#\x179\v#\x3#\x3#\x3$\x3$\x3"+
		"$\a$\x180\n$\f$\xE$\x183\v$\x3$\x3$\x3$\x2\x3\x34%\x2\x4\x6\b\n\f\xE\x10"+
		"\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44"+
		"\x46\x2\f\x4\x2\t\t\r\r\x6\x2\x1E\x1F\"#\x34\x34\x36\x36\x4\x2 !\')\x3"+
		"\x2$&\x3\x2\x1E\x1F\x3\x2\x1A\x1B\x3\x2\x16\x19\x3\x2\x14\x15\x3\x2\x37"+
		"\x38\x3\x2\"#\x1A0\x2H\x3\x2\x2\x2\x4P\x3\x2\x2\x2\x6[\x3\x2\x2\x2\b\x65"+
		"\x3\x2\x2\x2\ng\x3\x2\x2\x2\fp\x3\x2\x2\x2\xEs\x3\x2\x2\x2\x10{\x3\x2"+
		"\x2\x2\x12\x87\x3\x2\x2\x2\x14\x90\x3\x2\x2\x2\x16\x9A\x3\x2\x2\x2\x18"+
		"\xA2\x3\x2\x2\x2\x1A\xB1\x3\x2\x2\x2\x1C\xBD\x3\x2\x2\x2\x1E\xBF\x3\x2"+
		"\x2\x2 \xC8\x3\x2\x2\x2\"\xCA\x3\x2\x2\x2$\xCE\x3\x2\x2\x2&\xD2\x3\x2"+
		"\x2\x2(\xDF\x3\x2\x2\x2*\xEA\x3\x2\x2\x2,\xEC\x3\x2\x2\x2.\xEF\x3\x2\x2"+
		"\x2\x30\xF6\x3\x2\x2\x2\x32\xFC\x3\x2\x2\x2\x34\x122\x3\x2\x2\x2\x36\x147"+
		"\x3\x2\x2\x2\x38\x14A\x3\x2\x2\x2:\x14C\x3\x2\x2\x2<\x154\x3\x2\x2\x2"+
		">\x160\x3\x2\x2\x2@\x163\x3\x2\x2\x2\x42\x16B\x3\x2\x2\x2\x44\x171\x3"+
		"\x2\x2\x2\x46\x17C\x3\x2\x2\x2HI\a\x16\x2\x2IJ\x5\x34\x1B\x2JK\a*\x2\x2"+
		"KL\x5\x34\x1B\x2LM\a*\x2\x2MN\x5\x34\x1B\x2NO\a\x17\x2\x2O\x3\x3\x2\x2"+
		"\x2PQ\a\x16\x2\x2QR\x5\x34\x1B\x2RS\a*\x2\x2ST\x5\x34\x1B\x2TU\a*\x2\x2"+
		"UV\x5\x34\x1B\x2VW\a*\x2\x2WX\x5\x34\x1B\x2XY\a\x17\x2\x2Y\x5\x3\x2\x2"+
		"\x2Z\\\a\x3\x2\x2[Z\x3\x2\x2\x2[\\\x3\x2\x2\x2\\]\x3\x2\x2\x2]^\a\r\x2"+
		"\x2^_\a+\x2\x2_`\x5\x38\x1D\x2`\x61\a,\x2\x2\x61\x62\x5\x12\n\x2\x62\a"+
		"\x3\x2\x2\x2\x63\x66\x5\x12\n\x2\x64\x66\x5\x1C\xF\x2\x65\x63\x3\x2\x2"+
		"\x2\x65\x64\x3\x2\x2\x2\x66\t\x3\x2\x2\x2gh\a\x6\x2\x2hi\a\x5\x2\x2ik"+
		"\a+\x2\x2jl\x5\x34\x1B\x2kj\x3\x2\x2\x2kl\x3\x2\x2\x2lm\x3\x2\x2\x2mn"+
		"\a,\x2\x2no\x5\b\x5\x2o\v\x3\x2\x2\x2pq\a\x6\x2\x2qr\x5\b\x5\x2r\r\x3"+
		"\x2\x2\x2st\a\x5\x2\x2tv\a+\x2\x2uw\x5\x34\x1B\x2vu\x3\x2\x2\x2vw\x3\x2"+
		"\x2\x2wx\x3\x2\x2\x2xy\a,\x2\x2yz\x5\b\x5\x2z\xF\x3\x2\x2\x2{\x85\x5\xE"+
		"\b\x2|~\x5\n\x6\x2}|\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F}\x3\x2\x2\x2\x7F"+
		"\x80\x3\x2\x2\x2\x80\x82\x3\x2\x2\x2\x81\x83\x5\f\a\x2\x82\x81\x3\x2\x2"+
		"\x2\x82\x83\x3\x2\x2\x2\x83\x86\x3\x2\x2\x2\x84\x86\x5\f\a\x2\x85}\x3"+
		"\x2\x2\x2\x85\x84\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x11\x3\x2\x2\x2"+
		"\x87\x8B\a-\x2\x2\x88\x8A\x5\x1C\xF\x2\x89\x88\x3\x2\x2\x2\x8A\x8D\x3"+
		"\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8E\x3\x2\x2\x2"+
		"\x8D\x8B\x3\x2\x2\x2\x8E\x8F\a.\x2\x2\x8F\x13\x3\x2\x2\x2\x90\x91\a\x4"+
		"\x2\x2\x91\x92\x5\b\x5\x2\x92\x93\a\a\x2\x2\x93\x95\a+\x2\x2\x94\x96\x5"+
		"\x34\x1B\x2\x95\x94\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2"+
		"\x97\x98\a,\x2\x2\x98\x99\a\x12\x2\x2\x99\x15\x3\x2\x2\x2\x9A\x9B\a\a"+
		"\x2\x2\x9B\x9D\a+\x2\x2\x9C\x9E\x5\x34\x1B\x2\x9D\x9C\x3\x2\x2\x2\x9D"+
		"\x9E\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA0\a,\x2\x2\xA0\xA1\x5\b\x5"+
		"\x2\xA1\x17\x3\x2\x2\x2\xA2\xA3\a\b\x2\x2\xA3\xA4\a+\x2\x2\xA4\xA5\x5"+
		"\x36\x1C\x2\xA5\xA7\a\x12\x2\x2\xA6\xA8\x5\x34\x1B\x2\xA7\xA6\x3\x2\x2"+
		"\x2\xA7\xA8\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAA\a\x12\x2\x2\xAA\xAB"+
		"\x5\x36\x1C\x2\xAB\xAC\a,\x2\x2\xAC\xAD\x5\b\x5\x2\xAD\x19\x3\x2\x2\x2"+
		"\xAE\xB2\x5\x14\v\x2\xAF\xB2\x5\x18\r\x2\xB0\xB2\x5\x16\f\x2\xB1\xAE\x3"+
		"\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB0\x3\x2\x2\x2\xB2\x1B\x3\x2\x2\x2"+
		"\xB3\xBE\x5(\x15\x2\xB4\xBE\x5\x1E\x10\x2\xB5\xBE\x5 \x11\x2\xB6\xBE\x5"+
		"$\x13\x2\xB7\xBE\x5\"\x12\x2\xB8\xBE\x5&\x14\x2\xB9\xBE\x5\x10\t\x2\xBA"+
		"\xBE\x5\x1A\xE\x2\xBB\xBE\x5\x12\n\x2\xBC\xBE\a\x12\x2\x2\xBD\xB3\x3\x2"+
		"\x2\x2\xBD\xB4\x3\x2\x2\x2\xBD\xB5\x3\x2\x2\x2\xBD\xB6\x3\x2\x2\x2\xBD"+
		"\xB7\x3\x2\x2\x2\xBD\xB8\x3\x2\x2\x2\xBD\xB9\x3\x2\x2\x2\xBD\xBA\x3\x2"+
		"\x2\x2\xBD\xBB\x3\x2\x2\x2\xBD\xBC\x3\x2\x2\x2\xBE\x1D\x3\x2\x2\x2\xBF"+
		"\xC0\x5\x34\x1B\x2\xC0\xC1\a\x12\x2\x2\xC1\x1F\x3\x2\x2\x2\xC2\xC3\a\v"+
		"\x2\x2\xC3\xC4\x5\x34\x1B\x2\xC4\xC5\a\x12\x2\x2\xC5\xC9\x3\x2\x2\x2\xC6"+
		"\xC7\a\v\x2\x2\xC7\xC9\a\x12\x2\x2\xC8\xC2\x3\x2\x2\x2\xC8\xC6\x3\x2\x2"+
		"\x2\xC9!\x3\x2\x2\x2\xCA\xCB\a\x31\x2\x2\xCB\xCC\a\r\x2\x2\xCC\xCD\a\x12"+
		"\x2\x2\xCD#\x3\x2\x2\x2\xCE\xCF\a\f\x2\x2\xCF\xD0\a\r\x2\x2\xD0\xD1\a"+
		"\x12\x2\x2\xD1%\x3\x2\x2\x2\xD2\xD3\a\n\x2\x2\xD3\xD4\t\x2\x2\x2\xD4\xD5"+
		"\a\x12\x2\x2\xD5\'\x3\x2\x2\x2\xD6\xD7\a\x3\x2\x2\xD7\xD8\a\r\x2\x2\xD8"+
		"\xD9\a\x13\x2\x2\xD9\xDA\x5\x34\x1B\x2\xDA\xDB\a\x12\x2\x2\xDB\xE0\x3"+
		"\x2\x2\x2\xDC\xDD\a\x3\x2\x2\xDD\xDE\a\r\x2\x2\xDE\xE0\a\x12\x2\x2\xDF"+
		"\xD6\x3\x2\x2\x2\xDF\xDC\x3\x2\x2\x2\xE0)\x3\x2\x2\x2\xE1\xE2\a\x3\x2"+
		"\x2\xE2\xE3\a\r\x2\x2\xE3\xE4\a\x13\x2\x2\xE4\xE5\x5\x34\x1B\x2\xE5\xE6"+
		"\a\x12\x2\x2\xE6\xEB\x3\x2\x2\x2\xE7\xE8\a\x3\x2\x2\xE8\xE9\a\r\x2\x2"+
		"\xE9\xEB\a\x12\x2\x2\xEA\xE1\x3\x2\x2\x2\xEA\xE7\x3\x2\x2\x2\xEB+\x3\x2"+
		"\x2\x2\xEC\xED\a*\x2\x2\xED\xEE\x5\x34\x1B\x2\xEE-\x3\x2\x2\x2\xEF\xF3"+
		"\x5\x34\x1B\x2\xF0\xF2\x5,\x17\x2\xF1\xF0\x3\x2\x2\x2\xF2\xF5\x3\x2\x2"+
		"\x2\xF3\xF1\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4/\x3\x2\x2\x2\xF5\xF3\x3"+
		"\x2\x2\x2\xF6\xF7\a\r\x2\x2\xF7\xF8\a\x39\x2\x2\xF8\xF9\a\r\x2\x2\xF9"+
		"\x31\x3\x2\x2\x2\xFA\xFD\x5\x30\x19\x2\xFB\xFD\a\r\x2\x2\xFC\xFA\x3\x2"+
		"\x2\x2\xFC\xFB\x3\x2\x2\x2\xFD\x33\x3\x2\x2\x2\xFE\xFF\b\x1B\x1\x2\xFF"+
		"\x100\t\x3\x2\x2\x100\x123\x5\x34\x1B\x10\x101\x102\a+\x2\x2\x102\x103"+
		"\a\x3\x2\x2\x103\x104\a,\x2\x2\x104\x105\x3\x2\x2\x2\x105\x123\x5\x34"+
		"\x1B\xF\x106\x107\x5\x32\x1A\x2\x107\x108\t\x4\x2\x2\x108\x109\x5\x34"+
		"\x1B\x5\x109\x123\x3\x2\x2\x2\x10A\x10B\x5\x32\x1A\x2\x10B\x10C\a\x13"+
		"\x2\x2\x10C\x10D\x5\x34\x1B\x4\x10D\x123\x3\x2\x2\x2\x10E\x10F\a+\x2\x2"+
		"\x10F\x110\x5\x34\x1B\x2\x110\x111\a,\x2\x2\x111\x123\x3\x2\x2\x2\x112"+
		"\x113\a\r\x2\x2\x113\x114\a+\x2\x2\x114\x115\x5\x36\x1C\x2\x115\x116\a"+
		",\x2\x2\x116\x123\x3\x2\x2\x2\x117\x123\x5\x30\x19\x2\x118\x121\a\r\x2"+
		"\x2\x119\x121\a\x11\x2\x2\x11A\x121\a\xF\x2\x2\x11B\x121\a\x10\x2\x2\x11C"+
		"\x121\a\xE\x2\x2\x11D\x121\x5\x2\x2\x2\x11E\x121\x5\x4\x3\x2\x11F\x121"+
		"\x5:\x1E\x2\x120\x118\x3\x2\x2\x2\x120\x119\x3\x2\x2\x2\x120\x11A\x3\x2"+
		"\x2\x2\x120\x11B\x3\x2\x2\x2\x120\x11C\x3\x2\x2\x2\x120\x11D\x3\x2\x2"+
		"\x2\x120\x11E\x3\x2\x2\x2\x120\x11F\x3\x2\x2\x2\x121\x123\x3\x2\x2\x2"+
		"\x122\xFE\x3\x2\x2\x2\x122\x101\x3\x2\x2\x2\x122\x106\x3\x2\x2\x2\x122"+
		"\x10A\x3\x2\x2\x2\x122\x10E\x3\x2\x2\x2\x122\x112\x3\x2\x2\x2\x122\x117"+
		"\x3\x2\x2\x2\x122\x120\x3\x2\x2\x2\x123\x143\x3\x2\x2\x2\x124\x125\f\xE"+
		"\x2\x2\x125\x126\t\x5\x2\x2\x126\x142\x5\x34\x1B\xF\x127\x128\f\r\x2\x2"+
		"\x128\x129\t\x6\x2\x2\x129\x142\x5\x34\x1B\xE\x12A\x12B\f\f\x2\x2\x12B"+
		"\x12C\t\a\x2\x2\x12C\x142\x5\x34\x1B\r\x12D\x12E\f\v\x2\x2\x12E\x12F\t"+
		"\b\x2\x2\x12F\x142\x5\x34\x1B\f\x130\x131\f\n\x2\x2\x131\x132\t\t\x2\x2"+
		"\x132\x142\x5\x34\x1B\v\x133\x134\f\t\x2\x2\x134\x135\a\x33\x2\x2\x135"+
		"\x142\x5\x34\x1B\n\x136\x137\f\b\x2\x2\x137\x138\a\x35\x2\x2\x138\x142"+
		"\x5\x34\x1B\t\x139\x13A\f\a\x2\x2\x13A\x13B\a\x32\x2\x2\x13B\x142\x5\x34"+
		"\x1B\b\x13C\x13D\f\x6\x2\x2\x13D\x13E\t\n\x2\x2\x13E\x142\x5\x34\x1B\a"+
		"\x13F\x140\f\x11\x2\x2\x140\x142\t\v\x2\x2\x141\x124\x3\x2\x2\x2\x141"+
		"\x127\x3\x2\x2\x2\x141\x12A\x3\x2\x2\x2\x141\x12D\x3\x2\x2\x2\x141\x130"+
		"\x3\x2\x2\x2\x141\x133\x3\x2\x2\x2\x141\x136\x3\x2\x2\x2\x141\x139\x3"+
		"\x2\x2\x2\x141\x13C\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2\x142\x145\x3\x2"+
		"\x2\x2\x143\x141\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x35\x3\x2\x2\x2"+
		"\x145\x143\x3\x2\x2\x2\x146\x148\x5.\x18\x2\x147\x146\x3\x2\x2\x2\x147"+
		"\x148\x3\x2\x2\x2\x148\x37\x3\x2\x2\x2\x149\x14B\x5@!\x2\x14A\x149\x3"+
		"\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B\x39\x3\x2\x2\x2\x14C\x14D\a/\x2\x2"+
		"\x14D\x14E\x5\x36\x1C\x2\x14E\x14F\a\x30\x2\x2\x14F;\x3\x2\x2\x2\x150"+
		"\x153\x5*\x16\x2\x151\x153\x5\x6\x4\x2\x152\x150\x3\x2\x2\x2\x152\x151"+
		"\x3\x2\x2\x2\x153\x156\x3\x2\x2\x2\x154\x152\x3\x2\x2\x2\x154\x155\x3"+
		"\x2\x2\x2\x155\x158\x3\x2\x2\x2\x156\x154\x3\x2\x2\x2\x157\x159\x5\x46"+
		"$\x2\x158\x157\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x15D\x3\x2\x2\x2"+
		"\x15A\x15C\x5\x44#\x2\x15B\x15A\x3\x2\x2\x2\x15C\x15F\x3\x2\x2\x2\x15D"+
		"\x15B\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E=\x3\x2\x2\x2\x15F\x15D\x3"+
		"\x2\x2\x2\x160\x161\a\x3\x2\x2\x161\x162\a\r\x2\x2\x162?\x3\x2\x2\x2\x163"+
		"\x168\x5> \x2\x164\x165\a*\x2\x2\x165\x167\x5> \x2\x166\x164\x3\x2\x2"+
		"\x2\x167\x16A\x3\x2\x2\x2\x168\x166\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2"+
		"\x169\x41\x3\x2\x2\x2\x16A\x168\x3\x2\x2\x2\x16B\x16C\a\r\x2\x2\x16C\x16D"+
		"\a+\x2\x2\x16D\x16E\x5\x38\x1D\x2\x16E\x16F\a,\x2\x2\x16F\x170\x5\x12"+
		"\n\x2\x170\x43\x3\x2\x2\x2\x171\x172\a\n\x2\x2\x172\x173\t\x2\x2\x2\x173"+
		"\x177\a-\x2\x2\x174\x176\x5\x42\"\x2\x175\x174\x3\x2\x2\x2\x176\x179\x3"+
		"\x2\x2\x2\x177\x175\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x17A\x3\x2"+
		"\x2\x2\x179\x177\x3\x2\x2\x2\x17A\x17B\a.\x2\x2\x17B\x45\x3\x2\x2\x2\x17C"+
		"\x17D\a\t\x2\x2\x17D\x181\a-\x2\x2\x17E\x180\x5\x42\"\x2\x17F\x17E\x3"+
		"\x2\x2\x2\x180\x183\x3\x2\x2\x2\x181\x17F\x3\x2\x2\x2\x181\x182\x3\x2"+
		"\x2\x2\x182\x184\x3\x2\x2\x2\x183\x181\x3\x2\x2\x2\x184\x185\a.\x2\x2"+
		"\x185G\x3\x2\x2\x2![\x65kv\x7F\x82\x85\x8B\x95\x9D\xA7\xB1\xBD\xC8\xDF"+
		"\xEA\xF3\xFC\x120\x122\x141\x143\x147\x14A\x152\x154\x158\x15D\x168\x177"+
		"\x181";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LibLSLCC.Parser
