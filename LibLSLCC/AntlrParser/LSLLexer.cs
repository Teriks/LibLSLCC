//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AntlrParser\LSL.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LibLSLCC.AntlrParser {

	using LibLSLCC.Collections;
	using LibLSLCC.CodeValidator;

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class LSLLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TYPE=1, DO=2, IF=3, ELSE=4, WHILE=5, FOR=6, DEFAULT=7, STATE=8, RETURN=9, 
		JUMP=10, ID=11, HEX_LITERAL=12, INT=13, FLOAT=14, QUOTED_STRING=15, SEMI_COLON=16, 
		EQUAL=17, LOGICAL_EQUAL=18, LOGICAL_NOT_EQUAL=19, LESS_THAN=20, GREATER_THAN=21, 
		LESS_THAN_EQUAL=22, GREATER_THAN_EQUAL=23, RIGHT_SHIFT=24, LEFT_SHIFT=25, 
		RIGHT_SHIFT_EQUAL=26, LEFT_SHIFT_EQUAL=27, MINUS=28, PLUS=29, MINUS_EQUAL=30, 
		PLUS_EQUAL=31, INCREMENT=32, DECREMENT=33, MUL=34, DIV=35, MOD=36, MUL_EQUAL=37, 
		DIV_EQUAL=38, MOD_EQUAL=39, COMMA=40, O_PAREN=41, C_PAREN=42, O_BRACE=43, 
		C_BRACE=44, O_BRACKET=45, C_BRACKET=46, LABEL_PREFIX=47, BITWISE_OR=48, 
		BITWISE_AND=49, BITWISE_NOT=50, BITWISE_XOR=51, LOGICAL_NOT=52, LOGICAL_AND=53, 
		LOGICAL_OR=54, DOT=55, Whitespace=56, Newline=57, BlockComment=58, LineComment=59, 
		ErrorChar=60;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"TYPE", "DO", "IF", "ELSE", "WHILE", "FOR", "DEFAULT", "STATE", "RETURN", 
		"JUMP", "NameChar", "NameStartChar", "ID", "HEX_LITERAL", "INT", "FLOAT", 
		"QUOTED_STRING", "SEMI_COLON", "EQUAL", "LOGICAL_EQUAL", "LOGICAL_NOT_EQUAL", 
		"LESS_THAN", "GREATER_THAN", "LESS_THAN_EQUAL", "GREATER_THAN_EQUAL", 
		"RIGHT_SHIFT", "LEFT_SHIFT", "RIGHT_SHIFT_EQUAL", "LEFT_SHIFT_EQUAL", 
		"MINUS", "PLUS", "MINUS_EQUAL", "PLUS_EQUAL", "INCREMENT", "DECREMENT", 
		"MUL", "DIV", "MOD", "MUL_EQUAL", "DIV_EQUAL", "MOD_EQUAL", "COMMA", "O_PAREN", 
		"C_PAREN", "O_BRACE", "C_BRACE", "O_BRACKET", "C_BRACKET", "LABEL_PREFIX", 
		"BITWISE_OR", "BITWISE_AND", "BITWISE_NOT", "BITWISE_XOR", "LOGICAL_NOT", 
		"LOGICAL_AND", "LOGICAL_OR", "DOT", "Whitespace", "Newline", "BlockComment", 
		"LineComment", "ErrorChar"
	};



		public GenericArray<LSLComment> _comments = new GenericArray<LSLComment>();

		public IReadOnlyGenericArray<LSLComment> Comments { get { return _comments; } }

	    private struct LineCount
	    {
	        public int Lines;
	        public int EndColumn;
	    }

	    private static LineCount CountStringLines(int startColumn, string str)
	    {
			int cnt = 0;
	        int lastLineStart = 0;
	        int i = 0;
	        int endColumn;
			foreach(var c in str)
			{
				if(c == '\n')
				{
					cnt++;
	                lastLineStart = i+1;
				}
	            i++;
			}

	        if (lastLineStart == 0)
	        {
	            endColumn = (startColumn + str.Length) - 1;
	        }
	        else
	        {
	            endColumn = (i - lastLineStart) - 1;
	        }
	        return new LineCount { Lines = cnt, EndColumn = endColumn };
		}

	    /// <summary>
		/// This should be updated when the ID token rule in LSL.g4 is changed, so that the rule and this regex match
		/// This regex matches/validates LSL ID Tokens, IE: variable names, state names, label names, function names
		/// </summary>
		internal static string IDRegex = "(?:[_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD])(?:[_0-9A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040])*";
		

		/// <summary>
		/// This should be updated when the ID token rule in LSL.g4 is changed, so that the rule and this regex match
		/// This regex matches/validates that a character is a valid starting character for an ID Token
		/// </summary>
		internal static string IDStartCharRegex = "(?:[_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD])";

		/// <summary>
		/// This should be updated when the ID token rule in LSL.g4 is changed, so that the rule and this regex match
		/// This regex matches/validates that a character is a valid trailing character after the first character of an ID Token
		/// </summary>
		internal static string IDTrailingCharRegex = "(?:[_0-9A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040])";



	public LSLLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'do'", "'if'", "'else'", "'while'", "'for'", "'default'", 
		"'state'", "'return'", "'jump'", null, null, null, null, null, "';'", 
		"'='", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'>>'", "'<<'", "'>>='", 
		"'<<='", "'-'", "'+'", "'-='", "'+='", "'++'", "'--'", "'*'", "'/'", "'%'", 
		"'*='", "'/='", "'%='", "','", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"'@'", "'|'", "'&'", "'~'", "'^'", "'!'", "'&&'", "'||'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TYPE", "DO", "IF", "ELSE", "WHILE", "FOR", "DEFAULT", "STATE", 
		"RETURN", "JUMP", "ID", "HEX_LITERAL", "INT", "FLOAT", "QUOTED_STRING", 
		"SEMI_COLON", "EQUAL", "LOGICAL_EQUAL", "LOGICAL_NOT_EQUAL", "LESS_THAN", 
		"GREATER_THAN", "LESS_THAN_EQUAL", "GREATER_THAN_EQUAL", "RIGHT_SHIFT", 
		"LEFT_SHIFT", "RIGHT_SHIFT_EQUAL", "LEFT_SHIFT_EQUAL", "MINUS", "PLUS", 
		"MINUS_EQUAL", "PLUS_EQUAL", "INCREMENT", "DECREMENT", "MUL", "DIV", "MOD", 
		"MUL_EQUAL", "DIV_EQUAL", "MOD_EQUAL", "COMMA", "O_PAREN", "C_PAREN", 
		"O_BRACE", "C_BRACE", "O_BRACKET", "C_BRACKET", "LABEL_PREFIX", "BITWISE_OR", 
		"BITWISE_AND", "BITWISE_NOT", "BITWISE_XOR", "LOGICAL_NOT", "LOGICAL_AND", 
		"LOGICAL_OR", "DOT", "Whitespace", "Newline", "BlockComment", "LineComment", 
		"ErrorChar"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static LSLLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 59 : BlockComment_action(_localctx, actionIndex); break;
		case 60 : LineComment_action(_localctx, actionIndex); break;
		}
	}
	private void BlockComment_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: 
		                    var lineData = CountStringLines(this.TokenStartColumn, this.Text);
							_comments.Add(new LSLComment(
							this.Text, 
							LSLCommentType.Block,
							new LSLSourceCodeRange(
		                            this.TokenStartLine,
		                            this.TokenStartColumn,
		                            this.TokenStartLine + lineData.Lines, 
		                            lineData.EndColumn, 
		                            this.TokenStartCharIndex, 
		                            this.Text.Length+this.TokenStartCharIndex)
							));
						 break;
		}
	}
	private void LineComment_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: 
		                    var lineData = CountStringLines(this.TokenStartColumn, this.Text);
							_comments.Add(new LSLComment(
							this.Text, 
							LSLCommentType.SingleLine,
		                    new LSLSourceCodeRange(
		                            this.TokenStartLine,
		                            this.TokenStartColumn,
		                            this.TokenStartLine + lineData.Lines, 
		                            lineData.EndColumn, 
		                            this.TokenStartCharIndex, 
		                            this.Text.Length+this.TokenStartCharIndex)
							));
						 break;
		}
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2>\x1C1");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x3\x2\x3\x2\x3\x2");
		sb.Append("\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2");
		sb.Append("\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2");
		sb.Append("\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2");
		sb.Append("\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2");
		sb.Append("\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\xB1\n\x2\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3");
		sb.Append("\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3");
		sb.Append("\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3");
		sb.Append("\v\x3\f\x3\f\x5\f\xE4\n\f\x3\r\x3\r\x3\xE\x3\xE\a\xE\xEA\n\xE");
		sb.Append("\f\xE\xE\xE\xED\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x6\xF\xF3\n\xF");
		sb.Append("\r\xF\xE\xF\xF4\x3\x10\x6\x10\xF8\n\x10\r\x10\xE\x10\xF9\x3");
		sb.Append("\x11\x3\x11\x3\x11\x3\x11\x5\x11\x100\n\x11\x3\x11\x6\x11\x103");
		sb.Append("\n\x11\r\x11\xE\x11\x104\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x110\n\x11\x3\x11\x3\x11");
		sb.Append("\x3\x11\x5\x11\x115\n\x11\x3\x11\x6\x11\x118\n\x11\r\x11\xE");
		sb.Append("\x11\x119\x5\x11\x11C\n\x11\x3\x11\x5\x11\x11F\n\x11\x5\x11");
		sb.Append("\x121\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12");
		sb.Append("\x129\n\x12\f\x12\xE\x12\x12C\v\x12\x3\x12\x3\x12\x3\x13\x3");
		sb.Append("\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16");
		sb.Append("\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x1A\x3");
		sb.Append("\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D");
		sb.Append("\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3");
		sb.Append("\x1F\x3 \x3 \x3!\x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3$\x3$");
		sb.Append("\x3$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3(\x3(\x3(\x3)\x3)\x3)\x3*\x3");
		sb.Append("*\x3*\x3+\x3+\x3,\x3,\x3-\x3-\x3.\x3.\x3/\x3/\x3\x30\x3\x30");
		sb.Append("\x3\x31\x3\x31\x3\x32\x3\x32\x3\x33\x3\x33\x3\x34\x3\x34\x3");
		sb.Append("\x35\x3\x35\x3\x36\x3\x36\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38");
		sb.Append("\x3\x39\x3\x39\x3\x39\x3:\x3:\x3;\x6;\x194\n;\r;\xE;\x195\x3");
		sb.Append(";\x3;\x3<\x3<\x5<\x19C\n<\x3<\x5<\x19F\n<\x3<\x3<\x3=\x3=\x3");
		sb.Append("=\x3=\a=\x1A7\n=\f=\xE=\x1AA\v=\x3=\x3=\x3=\x3=\x3=\x3=\x3=");
		sb.Append("\x3>\x3>\x3>\x3>\a>\x1B7\n>\f>\xE>\x1BA\v>\x3>\x3>\x3>\x3>\x3");
		sb.Append("?\x3?\x4\x12A\x1A8\x2@\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11");
		sb.Append("\n\x13\v\x15\f\x17\x2\x19\x2\x1B\r\x1D\xE\x1F\xF!\x10#\x11%");
		sb.Append("\x12\'\x13)\x14+\x15-\x16/\x17\x31\x18\x33\x19\x35\x1A\x37\x1B");
		sb.Append("\x39\x1C;\x1D=\x1E?\x1F\x41 \x43!\x45\"G#I$K%M&O\'Q(S)U*W+Y");
		sb.Append(",[-]._/\x61\x30\x63\x31\x65\x32g\x33i\x34k\x35m\x36o\x37q\x38");
		sb.Append("s\x39u:w;y<{=}>\x3\x2\v\a\x2\x32;\x61\x61\xB9\xB9\x302\x371");
		sb.Append("\x2041\x2042\x10\x2\x43\\\x61\x61\x63|\xC2\xD8\xDA\xF8\xFA\x301");
		sb.Append("\x372\x37F\x381\x2001\x200E\x200F\x2072\x2191\x2C02\x2FF1\x3003");
		sb.Append("\xD801\xF902\xFDD1\xFDF2\xFFFF\x5\x2\x32;\x43H\x63h\x3\x2\x32");
		sb.Append(";\x4\x2GGgg\x4\x2HHhh\x3\x2$$\x4\x2\v\v\"\"\x4\x2\f\f\xF\xF");
		sb.Append("\x1DC\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2");
		sb.Append("\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2");
		sb.Append("\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2");
		sb.Append("\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2");
		sb.Append("\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2");
		sb.Append("\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3");
		sb.Append("\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2");
		sb.Append("\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2");
		sb.Append("\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3");
		sb.Append("\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2");
		sb.Append("\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2");
		sb.Append("\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2\x2\x2Y\x3\x2");
		sb.Append("\x2\x2\x2[\x3\x2\x2\x2\x2]\x3\x2\x2\x2\x2_\x3\x2\x2\x2\x2\x61");
		sb.Append("\x3\x2\x2\x2\x2\x63\x3\x2\x2\x2\x2\x65\x3\x2\x2\x2\x2g\x3\x2");
		sb.Append("\x2\x2\x2i\x3\x2\x2\x2\x2k\x3\x2\x2\x2\x2m\x3\x2\x2\x2\x2o\x3");
		sb.Append("\x2\x2\x2\x2q\x3\x2\x2\x2\x2s\x3\x2\x2\x2\x2u\x3\x2\x2\x2\x2");
		sb.Append("w\x3\x2\x2\x2\x2y\x3\x2\x2\x2\x2{\x3\x2\x2\x2\x2}\x3\x2\x2\x2");
		sb.Append("\x3\xB0\x3\x2\x2\x2\x5\xB2\x3\x2\x2\x2\a\xB5\x3\x2\x2\x2\t\xB8");
		sb.Append("\x3\x2\x2\x2\v\xBD\x3\x2\x2\x2\r\xC3\x3\x2\x2\x2\xF\xC7\x3\x2");
		sb.Append("\x2\x2\x11\xCF\x3\x2\x2\x2\x13\xD5\x3\x2\x2\x2\x15\xDC\x3\x2");
		sb.Append("\x2\x2\x17\xE3\x3\x2\x2\x2\x19\xE5\x3\x2\x2\x2\x1B\xE7\x3\x2");
		sb.Append("\x2\x2\x1D\xEE\x3\x2\x2\x2\x1F\xF7\x3\x2\x2\x2!\x120\x3\x2\x2");
		sb.Append("\x2#\x122\x3\x2\x2\x2%\x12F\x3\x2\x2\x2\'\x131\x3\x2\x2\x2)");
		sb.Append("\x133\x3\x2\x2\x2+\x136\x3\x2\x2\x2-\x139\x3\x2\x2\x2/\x13B");
		sb.Append("\x3\x2\x2\x2\x31\x13D\x3\x2\x2\x2\x33\x140\x3\x2\x2\x2\x35\x143");
		sb.Append("\x3\x2\x2\x2\x37\x146\x3\x2\x2\x2\x39\x149\x3\x2\x2\x2;\x14D");
		sb.Append("\x3\x2\x2\x2=\x151\x3\x2\x2\x2?\x153\x3\x2\x2\x2\x41\x155\x3");
		sb.Append("\x2\x2\x2\x43\x158\x3\x2\x2\x2\x45\x15B\x3\x2\x2\x2G\x15E\x3");
		sb.Append("\x2\x2\x2I\x161\x3\x2\x2\x2K\x163\x3\x2\x2\x2M\x165\x3\x2\x2");
		sb.Append("\x2O\x167\x3\x2\x2\x2Q\x16A\x3\x2\x2\x2S\x16D\x3\x2\x2\x2U\x170");
		sb.Append("\x3\x2\x2\x2W\x172\x3\x2\x2\x2Y\x174\x3\x2\x2\x2[\x176\x3\x2");
		sb.Append("\x2\x2]\x178\x3\x2\x2\x2_\x17A\x3\x2\x2\x2\x61\x17C\x3\x2\x2");
		sb.Append("\x2\x63\x17E\x3\x2\x2\x2\x65\x180\x3\x2\x2\x2g\x182\x3\x2\x2");
		sb.Append("\x2i\x184\x3\x2\x2\x2k\x186\x3\x2\x2\x2m\x188\x3\x2\x2\x2o\x18A");
		sb.Append("\x3\x2\x2\x2q\x18D\x3\x2\x2\x2s\x190\x3\x2\x2\x2u\x193\x3\x2");
		sb.Append("\x2\x2w\x19E\x3\x2\x2\x2y\x1A2\x3\x2\x2\x2{\x1B2\x3\x2\x2\x2");
		sb.Append("}\x1BF\x3\x2\x2\x2\x7F\x80\an\x2\x2\x80\x81\ak\x2\x2\x81\x82");
		sb.Append("\au\x2\x2\x82\xB1\av\x2\x2\x83\x84\ax\x2\x2\x84\x85\ag\x2\x2");
		sb.Append("\x85\x86\a\x65\x2\x2\x86\x87\av\x2\x2\x87\x88\aq\x2\x2\x88\xB1");
		sb.Append("\at\x2\x2\x89\x8A\ah\x2\x2\x8A\x8B\an\x2\x2\x8B\x8C\aq\x2\x2");
		sb.Append("\x8C\x8D\a\x63\x2\x2\x8D\xB1\av\x2\x2\x8E\x8F\ak\x2\x2\x8F\x90");
		sb.Append("\ap\x2\x2\x90\x91\av\x2\x2\x91\x92\ag\x2\x2\x92\x93\ai\x2\x2");
		sb.Append("\x93\x94\ag\x2\x2\x94\xB1\at\x2\x2\x95\x96\au\x2\x2\x96\x97");
		sb.Append("\av\x2\x2\x97\x98\at\x2\x2\x98\x99\ak\x2\x2\x99\x9A\ap\x2\x2");
		sb.Append("\x9A\xB1\ai\x2\x2\x9B\x9C\at\x2\x2\x9C\x9D\aq\x2\x2\x9D\x9E");
		sb.Append("\av\x2\x2\x9E\x9F\a\x63\x2\x2\x9F\xA0\av\x2\x2\xA0\xA1\ak\x2");
		sb.Append("\x2\xA1\xA2\aq\x2\x2\xA2\xB1\ap\x2\x2\xA3\xA4\as\x2\x2\xA4\xA5");
		sb.Append("\aw\x2\x2\xA5\xA6\a\x63\x2\x2\xA6\xA7\av\x2\x2\xA7\xA8\ag\x2");
		sb.Append("\x2\xA8\xA9\at\x2\x2\xA9\xAA\ap\x2\x2\xAA\xAB\ak\x2\x2\xAB\xAC");
		sb.Append("\aq\x2\x2\xAC\xB1\ap\x2\x2\xAD\xAE\am\x2\x2\xAE\xAF\ag\x2\x2");
		sb.Append("\xAF\xB1\a{\x2\x2\xB0\x7F\x3\x2\x2\x2\xB0\x83\x3\x2\x2\x2\xB0");
		sb.Append("\x89\x3\x2\x2\x2\xB0\x8E\x3\x2\x2\x2\xB0\x95\x3\x2\x2\x2\xB0");
		sb.Append("\x9B\x3\x2\x2\x2\xB0\xA3\x3\x2\x2\x2\xB0\xAD\x3\x2\x2\x2\xB1");
		sb.Append("\x4\x3\x2\x2\x2\xB2\xB3\a\x66\x2\x2\xB3\xB4\aq\x2\x2\xB4\x6");
		sb.Append("\x3\x2\x2\x2\xB5\xB6\ak\x2\x2\xB6\xB7\ah\x2\x2\xB7\b\x3\x2\x2");
		sb.Append("\x2\xB8\xB9\ag\x2\x2\xB9\xBA\an\x2\x2\xBA\xBB\au\x2\x2\xBB\xBC");
		sb.Append("\ag\x2\x2\xBC\n\x3\x2\x2\x2\xBD\xBE\ay\x2\x2\xBE\xBF\aj\x2\x2");
		sb.Append("\xBF\xC0\ak\x2\x2\xC0\xC1\an\x2\x2\xC1\xC2\ag\x2\x2\xC2\f\x3");
		sb.Append("\x2\x2\x2\xC3\xC4\ah\x2\x2\xC4\xC5\aq\x2\x2\xC5\xC6\at\x2\x2");
		sb.Append("\xC6\xE\x3\x2\x2\x2\xC7\xC8\a\x66\x2\x2\xC8\xC9\ag\x2\x2\xC9");
		sb.Append("\xCA\ah\x2\x2\xCA\xCB\a\x63\x2\x2\xCB\xCC\aw\x2\x2\xCC\xCD\a");
		sb.Append("n\x2\x2\xCD\xCE\av\x2\x2\xCE\x10\x3\x2\x2\x2\xCF\xD0\au\x2\x2");
		sb.Append("\xD0\xD1\av\x2\x2\xD1\xD2\a\x63\x2\x2\xD2\xD3\av\x2\x2\xD3\xD4");
		sb.Append("\ag\x2\x2\xD4\x12\x3\x2\x2\x2\xD5\xD6\at\x2\x2\xD6\xD7\ag\x2");
		sb.Append("\x2\xD7\xD8\av\x2\x2\xD8\xD9\aw\x2\x2\xD9\xDA\at\x2\x2\xDA\xDB");
		sb.Append("\ap\x2\x2\xDB\x14\x3\x2\x2\x2\xDC\xDD\al\x2\x2\xDD\xDE\aw\x2");
		sb.Append("\x2\xDE\xDF\ao\x2\x2\xDF\xE0\ar\x2\x2\xE0\x16\x3\x2\x2\x2\xE1");
		sb.Append("\xE4\x5\x19\r\x2\xE2\xE4\t\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE3");
		sb.Append("\xE2\x3\x2\x2\x2\xE4\x18\x3\x2\x2\x2\xE5\xE6\t\x3\x2\x2\xE6");
		sb.Append("\x1A\x3\x2\x2\x2\xE7\xEB\x5\x19\r\x2\xE8\xEA\x5\x17\f\x2\xE9");
		sb.Append("\xE8\x3\x2\x2\x2\xEA\xED\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEB");
		sb.Append("\xEC\x3\x2\x2\x2\xEC\x1C\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xEE");
		sb.Append("\xEF\a\x32\x2\x2\xEF\xF0\az\x2\x2\xF0\xF2\x3\x2\x2\x2\xF1\xF3");
		sb.Append("\t\x4\x2\x2\xF2\xF1\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF2");
		sb.Append("\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\x1E\x3\x2\x2\x2\xF6\xF8");
		sb.Append("\t\x5\x2\x2\xF7\xF6\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9\xF7");
		sb.Append("\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA \x3\x2\x2\x2\xFB\xFC\x5");
		sb.Append("\x1F\x10\x2\xFC\xFF\t\x6\x2\x2\xFD\x100\x5? \x2\xFE\x100\x5");
		sb.Append("=\x1F\x2\xFF\xFD\x3\x2\x2\x2\xFF\xFE\x3\x2\x2\x2\xFF\x100\x3");
		sb.Append("\x2\x2\x2\x100\x102\x3\x2\x2\x2\x101\x103\x5\x1F\x10\x2\x102");
		sb.Append("\x101\x3\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104\x102\x3\x2\x2\x2");
		sb.Append("\x104\x105\x3\x2\x2\x2\x105\x121\x3\x2\x2\x2\x106\x107\x5\x1F");
		sb.Append("\x10\x2\x107\x108\a\x30\x2\x2\x108\x109\x5\x1F\x10\x2\x109\x110");
		sb.Append("\x3\x2\x2\x2\x10A\x10B\a\x30\x2\x2\x10B\x110\x5\x1F\x10\x2\x10C");
		sb.Append("\x10D\x5\x1F\x10\x2\x10D\x10E\a\x30\x2\x2\x10E\x110\x3\x2\x2");
		sb.Append("\x2\x10F\x106\x3\x2\x2\x2\x10F\x10A\x3\x2\x2\x2\x10F\x10C\x3");
		sb.Append("\x2\x2\x2\x110\x11B\x3\x2\x2\x2\x111\x114\t\x6\x2\x2\x112\x115");
		sb.Append("\x5? \x2\x113\x115\x5=\x1F\x2\x114\x112\x3\x2\x2\x2\x114\x113");
		sb.Append("\x3\x2\x2\x2\x114\x115\x3\x2\x2\x2\x115\x117\x3\x2\x2\x2\x116");
		sb.Append("\x118\x5\x1F\x10\x2\x117\x116\x3\x2\x2\x2\x118\x119\x3\x2\x2");
		sb.Append("\x2\x119\x117\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x11C\x3");
		sb.Append("\x2\x2\x2\x11B\x111\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x11E");
		sb.Append("\x3\x2\x2\x2\x11D\x11F\t\a\x2\x2\x11E\x11D\x3\x2\x2\x2\x11E");
		sb.Append("\x11F\x3\x2\x2\x2\x11F\x121\x3\x2\x2\x2\x120\xFB\x3\x2\x2\x2");
		sb.Append("\x120\x10F\x3\x2\x2\x2\x121\"\x3\x2\x2\x2\x122\x12A\a$\x2\x2");
		sb.Append("\x123\x124\a^\x2\x2\x124\x129\a$\x2\x2\x125\x126\a^\x2\x2\x126");
		sb.Append("\x129\a^\x2\x2\x127\x129\n\b\x2\x2\x128\x123\x3\x2\x2\x2\x128");
		sb.Append("\x125\x3\x2\x2\x2\x128\x127\x3\x2\x2\x2\x129\x12C\x3\x2\x2\x2");
		sb.Append("\x12A\x12B\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2\x12B\x12D\x3\x2");
		sb.Append("\x2\x2\x12C\x12A\x3\x2\x2\x2\x12D\x12E\a$\x2\x2\x12E$\x3\x2");
		sb.Append("\x2\x2\x12F\x130\a=\x2\x2\x130&\x3\x2\x2\x2\x131\x132\a?\x2");
		sb.Append("\x2\x132(\x3\x2\x2\x2\x133\x134\a?\x2\x2\x134\x135\a?\x2\x2");
		sb.Append("\x135*\x3\x2\x2\x2\x136\x137\a#\x2\x2\x137\x138\a?\x2\x2\x138");
		sb.Append(",\x3\x2\x2\x2\x139\x13A\a>\x2\x2\x13A.\x3\x2\x2\x2\x13B\x13C");
		sb.Append("\a@\x2\x2\x13C\x30\x3\x2\x2\x2\x13D\x13E\a>\x2\x2\x13E\x13F");
		sb.Append("\a?\x2\x2\x13F\x32\x3\x2\x2\x2\x140\x141\a@\x2\x2\x141\x142");
		sb.Append("\a?\x2\x2\x142\x34\x3\x2\x2\x2\x143\x144\a@\x2\x2\x144\x145");
		sb.Append("\a@\x2\x2\x145\x36\x3\x2\x2\x2\x146\x147\a>\x2\x2\x147\x148");
		sb.Append("\a>\x2\x2\x148\x38\x3\x2\x2\x2\x149\x14A\a@\x2\x2\x14A\x14B");
		sb.Append("\a@\x2\x2\x14B\x14C\a?\x2\x2\x14C:\x3\x2\x2\x2\x14D\x14E\a>");
		sb.Append("\x2\x2\x14E\x14F\a>\x2\x2\x14F\x150\a?\x2\x2\x150<\x3\x2\x2");
		sb.Append("\x2\x151\x152\a/\x2\x2\x152>\x3\x2\x2\x2\x153\x154\a-\x2\x2");
		sb.Append("\x154@\x3\x2\x2\x2\x155\x156\a/\x2\x2\x156\x157\a?\x2\x2\x157");
		sb.Append("\x42\x3\x2\x2\x2\x158\x159\a-\x2\x2\x159\x15A\a?\x2\x2\x15A");
		sb.Append("\x44\x3\x2\x2\x2\x15B\x15C\a-\x2\x2\x15C\x15D\a-\x2\x2\x15D");
		sb.Append("\x46\x3\x2\x2\x2\x15E\x15F\a/\x2\x2\x15F\x160\a/\x2\x2\x160");
		sb.Append("H\x3\x2\x2\x2\x161\x162\a,\x2\x2\x162J\x3\x2\x2\x2\x163\x164");
		sb.Append("\a\x31\x2\x2\x164L\x3\x2\x2\x2\x165\x166\a\'\x2\x2\x166N\x3");
		sb.Append("\x2\x2\x2\x167\x168\a,\x2\x2\x168\x169\a?\x2\x2\x169P\x3\x2");
		sb.Append("\x2\x2\x16A\x16B\a\x31\x2\x2\x16B\x16C\a?\x2\x2\x16CR\x3\x2");
		sb.Append("\x2\x2\x16D\x16E\a\'\x2\x2\x16E\x16F\a?\x2\x2\x16FT\x3\x2\x2");
		sb.Append("\x2\x170\x171\a.\x2\x2\x171V\x3\x2\x2\x2\x172\x173\a*\x2\x2");
		sb.Append("\x173X\x3\x2\x2\x2\x174\x175\a+\x2\x2\x175Z\x3\x2\x2\x2\x176");
		sb.Append("\x177\a}\x2\x2\x177\\\x3\x2\x2\x2\x178\x179\a\x7F\x2\x2\x179");
		sb.Append("^\x3\x2\x2\x2\x17A\x17B\a]\x2\x2\x17B`\x3\x2\x2\x2\x17C\x17D");
		sb.Append("\a_\x2\x2\x17D\x62\x3\x2\x2\x2\x17E\x17F\a\x42\x2\x2\x17F\x64");
		sb.Append("\x3\x2\x2\x2\x180\x181\a~\x2\x2\x181\x66\x3\x2\x2\x2\x182\x183");
		sb.Append("\a(\x2\x2\x183h\x3\x2\x2\x2\x184\x185\a\x80\x2\x2\x185j\x3\x2");
		sb.Append("\x2\x2\x186\x187\a`\x2\x2\x187l\x3\x2\x2\x2\x188\x189\a#\x2");
		sb.Append("\x2\x189n\x3\x2\x2\x2\x18A\x18B\a(\x2\x2\x18B\x18C\a(\x2\x2");
		sb.Append("\x18Cp\x3\x2\x2\x2\x18D\x18E\a~\x2\x2\x18E\x18F\a~\x2\x2\x18F");
		sb.Append("r\x3\x2\x2\x2\x190\x191\a\x30\x2\x2\x191t\x3\x2\x2\x2\x192\x194");
		sb.Append("\t\t\x2\x2\x193\x192\x3\x2\x2\x2\x194\x195\x3\x2\x2\x2\x195");
		sb.Append("\x193\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2");
		sb.Append("\x197\x198\b;\x2\x2\x198v\x3\x2\x2\x2\x199\x19B\a\xF\x2\x2\x19A");
		sb.Append("\x19C\a\f\x2\x2\x19B\x19A\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2");
		sb.Append("\x19C\x19F\x3\x2\x2\x2\x19D\x19F\a\f\x2\x2\x19E\x199\x3\x2\x2");
		sb.Append("\x2\x19E\x19D\x3\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0\x1A1\b");
		sb.Append("<\x2\x2\x1A1x\x3\x2\x2\x2\x1A2\x1A3\a\x31\x2\x2\x1A3\x1A4\a");
		sb.Append(",\x2\x2\x1A4\x1A8\x3\x2\x2\x2\x1A5\x1A7\v\x2\x2\x2\x1A6\x1A5");
		sb.Append("\x3\x2\x2\x2\x1A7\x1AA\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A8");
		sb.Append("\x1A6\x3\x2\x2\x2\x1A9\x1AB\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2");
		sb.Append("\x1AB\x1AC\a,\x2\x2\x1AC\x1AD\a\x31\x2\x2\x1AD\x1AE\x3\x2\x2");
		sb.Append("\x2\x1AE\x1AF\b=\x3\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0\x1B1\b=\x4");
		sb.Append("\x2\x1B1z\x3\x2\x2\x2\x1B2\x1B3\a\x31\x2\x2\x1B3\x1B4\a\x31");
		sb.Append("\x2\x2\x1B4\x1B8\x3\x2\x2\x2\x1B5\x1B7\n\n\x2\x2\x1B6\x1B5\x3");
		sb.Append("\x2\x2\x2\x1B7\x1BA\x3\x2\x2\x2\x1B8\x1B6\x3\x2\x2\x2\x1B8\x1B9");
		sb.Append("\x3\x2\x2\x2\x1B9\x1BB\x3\x2\x2\x2\x1BA\x1B8\x3\x2\x2\x2\x1BB");
		sb.Append("\x1BC\b>\x5\x2\x1BC\x1BD\x3\x2\x2\x2\x1BD\x1BE\b>\x4\x2\x1BE");
		sb.Append("|\x3\x2\x2\x2\x1BF\x1C0\v\x2\x2\x2\x1C0~\x3\x2\x2\x2\x17\x2");
		sb.Append("\xB0\xE3\xEB\xF4\xF9\xFF\x104\x10F\x114\x119\x11B\x11E\x120");
		sb.Append("\x128\x12A\x195\x19B\x19E\x1A8\x1B8\x6\b\x2\x2\x3=\x2\x2\x3");
		sb.Append("\x2\x3>\x3");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace LibLSLCC.AntlrParser
